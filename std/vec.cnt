// vec.cnt
// Standart Dinamik Dizi (Vec) Modülü
// Yığın üzerinde büyüyüp küçülebilen, dinamik boyutlu, bitişik bir dizi.

import std::mem;       // Bellek manipülasyonu için (size_of, align_of, drop, forget, ManuallyDrop)
import std::ptr;       // Ham işaretçi işlemleri için (null_mut, NonZeroPtr, write, read, offset)
import std::ops;       // Deref, DerefMut, Index, IndexMut trait'leri için
import std::assert;    // Hata ayıklama için
import std::option;    // Option<T> dönüş tipleri için
import std::string;    // Hata mesajları için

// Not: Bu implementasyon, CNT derleyicisinin bellek tahsisi ve serbest bırakılması
// (`__builtin_alloc`, `__builtin_dealloc`, `__builtin_realloc`) gibi dil intrinsiklerine
// ve `std::mem::size_of`, `std::mem::align_of` gibi mem fonksiyonlarına sahip olduğu varsayılmıştır.

/// `RawVec<T>`: `Vec<T>`'nin ham bellek tahsisini ve yönetimini ele alan düşük seviyeli yardımcı yapı.
/// Bu, Rust'taki `RawVec`'e benzer, doğrudan kullanıcıya gösterilmez.
struct RawVec<T> {
    ptr: std::ptr::NonZeroPtr<T>, // Yığındaki başlangıç işaretçisi
    capacity: u64,                // Ayrılan toplam eleman sayısı
}

impl<T> RawVec<T> {
    /// `new()`: Boş, tahsis edilmemiş bir `RawVec` oluşturur.
    /// Capacity 0, ptr null olmayan bir dummy değerdir.
    pub fn new() -> RawVec<T> {
        // Zero-sized types için ayrı bir durum (belirli bir pointer'a ihtiyaç duymazlar)
        if std::mem::size_of::<T>() == 0 {
            RawVec {
                ptr: std::ptr::NonZeroPtr::dangling().unwrap(), // Geçersiz ama null olmayan bir işaretçi
                capacity: u64::MAX, // ZST'ler için kapasite sınırsız olabilir
            }
        } else {
            RawVec {
                ptr: std::ptr::NonZeroPtr::dangling().unwrap(), // Varsayımsal boş non-zero pointer
                capacity: 0,
            }
        }
    }

    /// `with_capacity(capacity: u64)`: Belirli bir kapasite ile yeni bir `RawVec` oluşturur.
    /// Bellek tahsisi yapar.
    pub fn with_capacity(capacity: u64) -> RawVec<T> {
        if capacity == 0 {
            return RawVec::new();
        }

        let size = capacity * std::mem::size_of::<T>();
        let align = std::mem::align_of::<T>();

        unsafe {
            // Bellek tahsis et
            let raw_ptr = __builtin_alloc(size, align);
            std::assert::assert_ne(raw_ptr, std::ptr::null_mut(), "Failed to allocate memory for RawVec".to_string());

            RawVec {
                ptr: std::ptr::NonZeroPtr::new(raw_ptr as std::ptr::ptr_mut<T>).unwrap(),
                capacity,
            }
        }
    }

    /// `grow(&mut self)`: `RawVec`'in kapasitesini artırır.
    /// Genellikle kapasiteyi iki katına çıkarır.
    pub fn grow(&mut self) {
        let old_capacity = self.capacity;
        let new_capacity = if old_capacity == 0 { 4 } else { old_capacity * 2 }; // Minimum 4 kapasite ile başla

        let size = new_capacity * std::mem::size_of::<T>();
        let align = std::mem::align_of::<T>();

        unsafe {
            // Belleği yeniden tahsis et
            let new_raw_ptr = __builtin_realloc(self.ptr.as_ptr() as std::ptr::ptr_mut<u8>,
                                                old_capacity * std::mem::size_of::<T>(), // Eski boyut
                                                size, // Yeni boyut
                                                align);
            std::assert::assert_ne(new_raw_ptr, std::ptr::null_mut(), "Failed to reallocate memory for RawVec".to_string());

            self.ptr = std::ptr::NonZeroPtr::new(new_raw_ptr as std::ptr::ptr_mut<T>).unwrap();
            self.capacity = new_capacity;
        }
    }

    /// `ptr(&self) -> *mut T`: Ham başlangıç işaretçisini döndürür.
    pub fn ptr(&self) -> std::ptr::ptr_mut<T> {
        self.ptr.as_ptr()
    }
}

// `RawVec` düştüğünde ayrılan belleği serbest bırakır.
impl<T> Drop for RawVec<T> {
    fn drop(&mut self) {
        // Yalnızca geçerli bir işaretçi ve kapasite varsa serbest bırak
        if self.capacity > 0 && std::mem::size_of::<T>() != 0 {
            unsafe {
                let size = self.capacity * std::mem::size_of::<T>();
                let align = std::mem::align_of::<T>();
                __builtin_dealloc(self.ptr.as_ptr() as std::ptr::ptr_mut<u8>, size, align);
            }
        }
    }
}


/// `Vec<T>`: Yığın üzerinde büyüyüp küçülebilen, dinamik boyutlu, bitişik bir dizi koleksiyonu.
///
/// `Vec` elemanları bellekte ardışık olarak depolanır, bu da indeksleme yoluyla hızlı erişim sağlar.
/// Eleman eklendiğinde veya kaldırıldığında, `Vec`'in kapasitesi otomatik olarak yönetilir.
pub struct Vec<T> {
    buf: RawVec<T>,
    len: u64, // Mevcut eleman sayısı
}

impl<T> Vec<T> {
    /// `new()`: Boş bir `Vec<T>` oluşturur.
    pub fn new() -> Vec<T> {
        Vec {
            buf: RawVec::new(),
            len: 0,
        }
    }

    /// `with_capacity(capacity: u64)`: Belirtilen kapasite ile yeni bir `Vec<T>` oluşturur.
    /// Bu, bellek yeniden tahsisini önlemek için önceden boyutlandırma yapmanızı sağlar.
    pub fn with_capacity(capacity: u64) -> Vec<T> {
        Vec {
            buf: RawVec::with_capacity(capacity),
            len: 0,
        }
    }

    /// `len(&self) -> u64`: `Vec`'teki eleman sayısını döndürür.
    pub fn len(&self) -> u64 {
        self.len
    }

    /// `capacity(&self) -> u64`: `Vec`'in yeniden tahsis etmeden önce tutabileceği eleman sayısını döndürür.
    pub fn capacity(&self) -> u64 {
        self.buf.capacity
    }

    /// `is_empty(&self) -> bool`: `Vec`'in boş olup olmadığını kontrol eder.
    pub fn is_empty(&self) -> bool {
        self.len == 0
    }

    /// `push(&mut self, elem: T)`: `Vec`'in sonuna bir eleman ekler.
    ///
    /// Eğer mevcut kapasite yetersizse, `Vec`'in kapasitesi otomatik olarak artırılır.
    pub fn push(&mut self, elem: T) {
        // Kapasite kontrolü ve gerekirse büyütme
        if self.len == self.capacity() {
            self.buf.grow();
        }

        unsafe {
            // Elemanı mevcut uzunluk konumuna yaz
            std::ptr::write(self.buf.ptr().offset(self.len), elem);
        }
        self.len += 1;
    }

    /// `pop(&mut self) -> Option<T>`: `Vec`'in sonundaki elemanı kaldırır ve döndürür.
    ///
    /// Eğer `Vec` boşsa `None` döndürür.
    pub fn pop(&mut self) -> option::Option<T> {
        if self.len == 0 {
            return option::Option::None;
        }
        self.len -= 1;
        unsafe {
            // Elemanı oku ve sahipliğini al
            option::Option::Some(std::ptr::read(self.buf.ptr().offset(self.len)))
        }
    }

    /// `insert(&mut self, index: u64, elem: T)`: Belirtilen dizine bir eleman ekler.
    ///
    /// Mevcut elemanlar sağa kaydırılır.
    /// Eğer `index` geçerli değilse (len'den büyükse), panic (hata) oluşur.
    pub fn insert(&mut self, index: u64, elem: T) {
        std::assert::assert!(index <= self.len, "Vec: insertion index out of bounds".to_string());

        if self.len == self.capacity() {
            self.buf.grow();
        }

        unsafe {
            // Eklenen elemandan sonraki elemanları sağa kaydır
            if index < self.len {
                // Kaydırılacak bellek bloğunun başlangıcı
                let dest_ptr = self.buf.ptr().offset(index + 1);
                let src_ptr = self.buf.ptr().offset(index);
                let count = self.len - index; // Kaydırılacak eleman sayısı
                // Belleği kopyala (üst üste binebilir, memmove gibi davranmalı)
                __builtin_mem_copy(dest_ptr as std::ptr::ptr_mut<u8>,
                                  src_ptr as std::ptr::ptr_mut<u8>,
                                  count * std::mem::size_of::<T>());
            }
            // Yeni elemanı belirtilen dizine yaz
            std::ptr::write(self.buf.ptr().offset(index), elem);
        }
        self.len += 1;
    }

    /// `remove(&mut self, index: u64) -> T`: Belirtilen dizindeki elemanı kaldırır ve döndürür.
    ///
    /// Elemanlar sola kaydırılır.
    /// Eğer `index` geçerli değilse, panic (hata) oluşur.
    pub fn remove(&mut self, index: u64) -> T {
        std::assert::assert!(index < self.len, "Vec: removal index out of bounds".to_string());

        self.len -= 1;
        unsafe {
            // Kaldırılan elemanı oku ve sahipliğini al
            let removed_elem = std::ptr::read(self.buf.ptr().offset(index));

            // Kaldırılan elemandan sonraki elemanları sola kaydır
            if index < self.len {
                // Kaydırılacak bellek bloğunun başlangıcı
                let dest_ptr = self.buf.ptr().offset(index);
                let src_ptr = self.buf.ptr().offset(index + 1);
                let count = self.len - index; // Kaydırılacak eleman sayısı
                // Belleği kopyala (üst üste binebilir, memmove gibi davranmalı)
                __builtin_mem_copy(dest_ptr as std::ptr::ptr_mut<u8>,
                                  src_ptr as std::ptr::ptr_mut<u8>,
                                  count * std::mem::size_of::<T>());
            }
            removed_elem
        }
    }

    /// `clear(&mut self)`: `Vec`'teki tüm elemanları kaldırır.
    ///
    /// Kapasiteyi korur, ancak elemanları düşürür.
    pub fn clear(&mut self) {
        // Tüm elemanları teker teker düşür
        // Note: iterasyon tersine yapılmalı ki, Drop implementasyonları sırasında
        // iç içe veri yapıları düzgünce düşürülebilsin.
        for i in (0..self.len).rev() {
            unsafe {
                std::mem::drop(std::ptr::read(self.buf.ptr().offset(i)));
            }
        }
        self.len = 0;
    }
}

// `Vec<T>` için `Deref` implementasyonu, `Vec`'in bir `&[T]` (slice) gibi davranmasını sağlar.
impl<T> ops::Deref for Vec<T> {
    type Target = [T]; // Dilin slice tipini varsayıyoruz

    fn deref(&self) -> &[T] {
        unsafe {
            // Ham işaretçiyi ve uzunluğu kullanarak bir slice oluştur
            std::ptr::slice_from_raw_parts(self.buf.ptr(), self.len)
        }
    }
}

// `Vec<T>` için `DerefMut` implementasyonu, `Vec`'in bir `&mut [T]` (değişebilir slice) gibi davranmasını sağlar.
impl<T> ops::DerefMut for Vec<T> {
    fn deref_mut(&mut self) -> &mut [T] {
        unsafe {
            // Ham işaretçiyi ve uzunluğu kullanarak değişebilir bir slice oluştur
            std::ptr::slice_from_raw_parts_mut(self.buf.ptr(), self.len)
        }
    }
}

// `Vec<T>` için `Index` implementasyonu, `vec[index]` ile elemanlara erişim sağlar.
impl<T> ops::Index<u64> for Vec<T> {
    type Output = T;

    fn index(&self, index: u64) -> &T {
        std::assert::assert!(index < self.len, "Vec: index out of bounds".to_string());
        unsafe {
            // Ham işaretçi aritmetiği ile elemana eriş
            &*(self.buf.ptr().offset(index))
        }
    }
}

// `Vec<T>` için `IndexMut` implementasyonu, `vec[index] = value` ile elemanlara değişebilir erişim sağlar.
impl<T> ops::IndexMut<u64> for Vec<T> {
    fn index_mut(&mut self, index: u64) -> &mut T {
        std::assert::assert!(index < self.len, "Vec: index out of bounds".to_string());
        unsafe {
            // Ham işaretçi aritmetiği ile elemana değişebilir eriş
            &mut *(self.buf.ptr().offset(index))
        }
    }
}

// `Vec<T>` klonlandığında tüm elemanları klonlar.
impl<T: ops::Clone> Clone for Vec<T> {
    fn clone(&self) -> Vec<T> {
        let mut new_vec = Vec::with_capacity(self.len);
        for i in 0..self.len {
            unsafe {
                // Her elemanı klonla ve yeni Vec'e kopyala
                std::ptr::write(new_vec.buf.ptr().offset(i), std::ptr::read(self.buf.ptr().offset(i)).clone());
            }
        }
        new_vec.len = self.len;
        new_vec
    }
}

// `Vec<T>` düşürüldüğünde tüm elemanlarını ve ayrılan belleği düşürür.
impl<T> Drop for Vec<T> {
    fn drop(&mut self) {
        // Tüm elemanları drop et. clear() metodu bu işi yapıyor.
        self.clear();
        // `self.buf` kendisi düşürüldüğünde ayrılan belleği serbest bırakacaktır.
    }
}

// Varsayılan boş Vec oluşturucu
impl<T> Default for Vec<T> {
    fn default() -> Vec<T> {
        Vec::new()
    }
}

// --- Örnek Kullanım ---

import std::vec;
import std::io;
import std::string;
import std::option;

fn main() {
    io::println("Starting Vec example...".to_string());

    // 1. Oluşturma ve Ekleme
    let mut my_vec: vec::Vec<i32> = vec::Vec::new();
    io::println("Initial Vec - Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:0, C:0

    my_vec.push(10);
    my_vec.push(20);
    my_vec.push(30);
    io::println("After pushes - Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:3, C:4 (veya büyüme politikasına göre değişir)

    // 2. Erişim
    io::println("Element at index 0: ".to_string() + my_vec[0].to_string()); // 10
    io::println("Element at index 2: ".to_string() + my_vec[2].to_string()); // 30

    // my_vec[0] = 15; // Değişken erişim
     io::println("Modified element at index 0: ".to_string() + my_vec[0].to_string()); // 15

    // 3. Pop (Sondan Kaldırma)
    let popped_val = my_vec.pop();
    match popped_val {
        option::Option::Some(val) => io::println("Popped value: ".to_string() + val.to_string()), // 30
        option::Option::None => io::println("Vec was empty.".to_string()),
    }
    io::println("After pop - Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:2, C:4

    // 4. Insert (Ortaya Ekleme)
    my_vec.insert(1, 25); // 10, 25, 20
    io::println("After insert 25 at index 1: ".to_string());
    for i in 0..my_vec.len() {
        io::print(my_vec[i].to_string() + " ");
    }
    io::println("".to_string());
    io::println("Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:3, C:4

    // 5. Remove (Ortadan Kaldırma)
    let removed_val = my_vec.remove(1); // Kaldır 25 -> 10, 20
    io::println("Removed value at index 1: ".to_string() + removed_val.to_string()); // 25
    io::println("After remove at index 1: ".to_string());
    for i in 0..my_vec.len() {
        io::print(my_vec[i].to_string() + " ");
    }
    io::println("".to_string());
    io::println("Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:2, C:4

    // 6. Klonlama
    io::println("\n--- Cloning Vec ---".to_string());
    let mut cloned_vec = my_vec.clone();
    io::println("Cloned Vec - Length: ".to_string() + cloned_vec.len().to_string() + ", Capacity: ".to_string() + cloned_vec.capacity().to_string()); // L:2, C:2
    cloned_vec.push(40);
    io::println("Cloned Vec after push: ".to_string());
    for i in 0..cloned_vec.len() {
        io::print(cloned_vec[i].to_string() + " "); // 10, 20, 40
    }
    io::println("".to_string());
    io::println("Original Vec (unchanged): ".to_string());
    for i in 0..my_vec.len() {
        io::print(my_vec[i].to_string() + " "); // 10, 20
    }
    io::println("".to_string());

    // 7. Temizleme
    io::println("\n--- Clearing Vec ---".to_string());
    my_vec.clear();
    io::println("After clear - Length: ".to_string() + my_vec.len().to_string() + ", Capacity: ".to_string() + my_vec.capacity().to_string()); // L:0, C:4 (kapasite korunur)
    io::println("Is empty: ".to_string() + my_vec.is_empty().to_string()); // true

    // Vec kapsam dışına çıktığında otomatik olarak düşürülür (bellek serbest bırakılır)
    io::println("Vec example finished.".to_string());
}
