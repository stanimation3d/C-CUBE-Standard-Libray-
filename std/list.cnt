// list.cnt
// Standart Çift Yönlü Bağlantılı Liste Modülü
// Dinamik boyutlu, düğümler halinde saklanan elemanları yönetir.

import std::string;     // Hata mesajları için
import std::alloc;      // Bellek tahsisi ve serbest bırakma için
import std::assert;     // Geliştirme/hata ayıklama için

/// `Error` Enum'u: Liste işlemleri sırasında oluşabilecek hataları temsil eder.
pub enum Error {
    /// Geçersiz indeks erişimi.
    IndexOutOfBounds(string);
    /// Bellek tahsisi başarısız oldu.
    AllocationError(string);
    /// Liste boşken eleman çıkarmaya çalışma.
    ListEmpty(string);
    /// Belirtilen eleman bulunamadı.
    NotFound(string);
    /// Bilinmeyen veya yakalanamayan bir hata.
    Other(string);
}

/// `Result<T, E>` Enum'u: Bir işlemin başarılı sonucunu (`Ok(T)`) veya bir hatayı (`Err(E)`) temsil eder.
pub enum Result<T, E> {
    Ok(T);
    Err(E);
}

/// `Node<T>` Struct'ı: Bağlantılı listedeki bir düğümü temsil eder.
pub struct Node<T> {
    /// Düğümün değeri.
    value: T;
    /// Sonraki düğüme işaretçi (null eğer son düğümse).
    next: raw_ptr<Node<T>>;
    /// Önceki düğüme işaretçi (null eğer ilk düğümse).
    prev: raw_ptr<Node<T>>;
}

/// `List<T>` Struct'ı: Çift yönlü bağlantılı listeyi temsil eder.
///
/// # Tip Parametreleri
/// - `T`: Listede saklanacak elemanların tipi.
pub struct List<T> {
    /// Listenin başındaki düğüme işaretçi (head).
    head: raw_ptr<Node<T>>;
    /// Listenin sonundaki düğüme işaretçi (tail).
    tail: raw_ptr<Node<T>>;
    /// Listedeki eleman sayısı.
    len: int;
}

// --- 1. Liste Oluşturma ve Yönetme ---

/// Yeni, boş bir `List` oluşturur.
///
/// # Dönüş Değeri
/// Oluşturulan `List<T>` nesnesi.
pub fn new<T>() -> List<T> {
    List {
        head: null_ptr(),
        tail: null_ptr(),
        len: 0,
    }
}

/// Bir `Node<T>` düğümünü bellekte tahsis eder.
fn allocate_node<T>(value: T) -> Result<raw_ptr<Node<T>>, Error> {
    match alloc::allocate(size_of<Node<T>>()) {
        Result::Ok(ptr_u8) => {
            let node_ptr = ptr_u8 as raw_ptr<Node<T>>;
            // Düğümün alanlarını başlat
            raw_ptr_write(node_ptr, 0, Node { value: value, next: null_ptr(), prev: null_ptr() });
            Result::Ok(node_ptr)
        },
        Result::Err(e) => Result::Err(Error::AllocationError("Failed to allocate list node: ".to_string() + e.to_string())),
    }
}

/// Bir `Node<T>` düğümünün belleğini serbest bırakır.
fn deallocate_node<T>(node_ptr: raw_ptr<Node<T>>) -> void {
    if node_ptr != null_ptr() {
        // Düğümdeki T değeri için destructors çağrılmalı mı?
        // CNT'nin bellek yönetimi ve destructor mekanizmasına bağlı.
        alloc::deallocate(node_ptr as raw_ptr<u8>, size_of<Node<T>>());
    }
}

/// Bir `List`'in belleğini serbest bırakır ve tüm düğümleri temizler.
/// Bu fonksiyon, Liste artık kullanılmadığı zaman çağrılmalıdır.
pub fn drop<T>(list: &mut List<T>) -> void {
    let mut current_node = list.head;
    while current_node != null_ptr() {
        let next_node = raw_ptr_read(current_node, 0).next; // current_node'un next'ini al
        deallocate_node(current_node); // current_node'u serbest bırak
        current_node = next_node; // Sonraki düğüme geç
    }
    list.head = null_ptr();
    list.tail = null_ptr();
    list.len = 0;
}

// --- 2. Eleman Ekleme ve Çıkarma ---

/// Listenin başına bir eleman ekler. O(1)
///
/// # Parametreler
/// - `list`: Elemanın ekleneceği `List<T>`'nin mutable referansı.
/// - `item`: Eklenecek eleman.
pub fn push_front<T>(list: &mut List<T>, item: T) -> Result<void, Error> {
    match allocate_node(item) {
        Result::Ok(new_node_ptr) => {
            let mut new_node = raw_ptr_read(new_node_ptr, 0);
            if list.head == null_ptr() { // Liste boşsa
                list.head = new_node_ptr;
                list.tail = new_node_ptr;
            } else {
                let mut old_head = raw_ptr_read(list.head, 0);
                new_node.next = list.head;
                old_head.prev = new_node_ptr;
                raw_ptr_write(list.head, 0, old_head); // Eski başı güncelle
                list.head = new_node_ptr;
            }
            raw_ptr_write(new_node_ptr, 0, new_node); // Yeni düğümü belleğe yaz
            list.len = list.len + 1;
            Result::Ok(())
        },
        Result::Err(e) => Result::Err(e),
    }
}

/// Listenin sonuna bir eleman ekler. O(1)
///
/// # Parametreler
/// - `list`: Elemanın ekleneceği `List<T>`'nin mutable referansı.
/// - `item`: Eklenecek eleman.
pub fn push_back<T>(list: &mut List<T>, item: T) -> Result<void, Error> {
    match allocate_node(item) {
        Result::Ok(new_node_ptr) => {
            let mut new_node = raw_ptr_read(new_node_ptr, 0);
            if list.tail == null_ptr() { // Liste boşsa
                list.head = new_node_ptr;
                list.tail = new_node_ptr;
            } else {
                let mut old_tail = raw_ptr_read(list.tail, 0);
                new_node.prev = list.tail;
                old_tail.next = new_node_ptr;
                raw_ptr_write(list.tail, 0, old_tail); // Eski kuyruğu güncelle
                list.tail = new_node_ptr;
            }
            raw_ptr_write(new_node_ptr, 0, new_node); // Yeni düğümü belleğe yaz
            list.len = list.len + 1;
            Result::Ok(())
        },
        Result::Err(e) => Result::Err(e),
    }
}

/// Listenin başından bir elemanı çıkarır ve döndürür. O(1)
/// Liste boşsa hata döner.
///
/// # Parametreler
/// - `list`: Elemanın çıkarılacağı `List<T>`'nin mutable referansı.
///
/// # Dönüş Değeri
/// `Result::Ok(T)` çıkarılan eleman, `Result::Err(Error)` Liste boşsa.
pub fn pop_front<T>(list: &mut List<T>) -> Result<T, Error> {
    if list.head == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot pop from an empty list".to_string()));
    }

    let old_head_ptr = list.head;
    let old_head_node = raw_ptr_read(old_head_ptr, 0);
    let item = old_head_node.value;

    list.head = old_head_node.next;
    if list.head != null_ptr() {
        let mut new_head_node = raw_ptr_read(list.head, 0);
        new_head_node.prev = null_ptr();
        raw_ptr_write(list.head, 0, new_head_node);
    } else { // Liste boşaldı
        list.tail = null_ptr();
    }

    deallocate_node(old_head_ptr);
    list.len = list.len - 1;
    Result::Ok(item)
}

/// Listenin sonundan bir elemanı çıkarır ve döndürür. O(1)
/// Liste boşsa hata döner.
///
/// # Parametreler
/// - `list`: Elemanın çıkarılacağı `List<T>`'nin mutable referansı.
///
/// # Dönüş Değeri
/// `Result::Ok(T)` çıkarılan eleman, `Result::Err(Error)` Liste boşsa.
pub fn pop_back<T>(list: &mut List<T>) -> Result<T, Error> {
    if list.tail == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot pop from an empty list".to_string()));
    }

    let old_tail_ptr = list.tail;
    let old_tail_node = raw_ptr_read(old_tail_ptr, 0);
    let item = old_tail_node.value;

    list.tail = old_tail_node.prev;
    if list.tail != null_ptr() {
        let mut new_tail_node = raw_ptr_read(list.tail, 0);
        new_tail_node.next = null_ptr();
        raw_ptr_write(list.tail, 0, new_tail_node);
    } else { // Liste boşaldı
        list.head = null_ptr();
    }

    deallocate_node(old_tail_ptr);
    list.len = list.len - 1;
    Result::Ok(item)
}

/// Listenin belirtilen indeksine bir eleman ekler. O(n)
///
/// # Parametreler
/// - `list`: Elemanın ekleneceği `List<T>`'nin mutable referansı.
/// - `index`: Elemanın ekleneceği konum (0-tabanlı).
/// - `item`: Eklenecek eleman.
pub fn insert<T>(list: &mut List<T>, index: int, item: T) -> Result<void, Error> {
    if index < 0 || index > list.len {
        return Result::Err(Error::IndexOutOfBounds("Index out of bounds for insert operation".to_string()));
    }
    if index == 0 {
        return push_front(list, item);
    }
    if index == list.len {
        return push_back(list, item);
    }

    // Ekleme noktasını bul
    let mut current_ptr = list.head;
    for i in 0..index {
        current_ptr = raw_ptr_read(current_ptr, 0).next;
    }
    let prev_node_ptr = raw_ptr_read(current_ptr, 0).prev;

    match allocate_node(item) {
        Result::Ok(new_node_ptr) => {
            let mut new_node = raw_ptr_read(new_node_ptr, 0);
            let mut current_node = raw_ptr_read(current_ptr, 0);
            let mut prev_node = raw_ptr_read(prev_node_ptr, 0);

            new_node.next = current_ptr;
            new_node.prev = prev_node_ptr;
            current_node.prev = new_node_ptr;
            prev_node.next = new_node_ptr;

            raw_ptr_write(new_node_ptr, 0, new_node);
            raw_ptr_write(current_ptr, 0, current_node);
            raw_ptr_write(prev_node_ptr, 0, prev_node);

            list.len = list.len + 1;
            Result::Ok(())
        },
        Result::Err(e) => Result::Err(e),
    }
}

/// Listenin belirtilen indeksindeki elemanı siler ve döndürür. O(n)
///
/// # Parametreler
/// - `list`: Elemanın silineceği `List<T>`'nin mutable referansı.
/// - `index`: Silinecek elemanın indeksi.
///
/// # Dönüş Değeri
/// `Result::Ok(T)` silinen eleman, `Result::Err(Error)` geçersiz indeks ise.
pub fn remove_at<T>(list: &mut List<T>, index: int) -> Result<T, Error> {
    if index < 0 || index >= list.len {
        return Result::Err(Error::IndexOutOfBounds("Index out of bounds for remove_at operation".to_string()));
    }
    if index == 0 {
        return pop_front(list);
    }
    if index == list.len - 1 {
        return pop_back(list);
    }

    // Silme noktasını bul
    let mut current_ptr = list.head;
    for i in 0..index {
        current_ptr = raw_ptr_read(current_ptr, 0).next;
    }
    let current_node = raw_ptr_read(current_ptr, 0);
    let item = current_node.value;

    let mut prev_node = raw_ptr_read(current_node.prev, 0);
    let mut next_node = raw_ptr_read(current_node.next, 0);

    prev_node.next = current_node.next;
    next_node.prev = current_node.prev;

    raw_ptr_write(current_node.prev, 0, prev_node);
    raw_ptr_write(current_node.next, 0, next_node);

    deallocate_node(current_ptr);
    list.len = list.len - 1;
    Result::Ok(item)
}

/// Listedeki tüm elemanları temizler.
pub fn clear<T>(list: &mut List<T>) -> void {
    drop(list); // Drop fonksiyonu tüm düğümleri serbest bırakır ve listeyi sıfırlar.
}

// --- 3. Eleman Erişimi ve Arama ---

/// Belirli bir indeksteki elemanın immutable referansını döndürür. O(n)
///
/// # Parametreler
/// - `list`: Elemanın okunacağı `List<T>`'nin referansı.
/// - `index`: Elemanın indeksi.
///
/// # Dönüş Değeri
/// `Result::Ok(&T)` elemanın referansı, `Result::Err(Error)` geçersiz indeks ise.
pub fn get<T>(list: &List<T>, index: int) -> Result<&T, Error> {
    if index < 0 || index >= list.len {
        return Result::Err(Error::IndexOutOfBounds("Index out of bounds for get operation".to_string()));
    }
    let mut current_ptr = list.head;
    for i in 0..index {
        current_ptr = raw_ptr_read(current_ptr, 0).next;
    }
    Result::Ok(&raw_ptr_read(current_ptr, 0).value)
}

/// Belirli bir indeksteki elemanın mutable referansını döndürür. O(n)
///
/// # Parametreler
/// - `list`: Elemanın değiştirileceği `List<T>`'nin mutable referansı.
/// - `index`: Elemanın indeksi.
///
/// # Dönüş Değeri
/// `Result::Ok(&mut T)` elemanın mutable referansı, `Result::Err(Error)` geçersiz indeks ise.
pub fn get_mut<T>(list: &mut List<T>, index: int) -> Result<&mut T, Error> {
    if index < 0 || index >= list.len {
        return Result::Err(Error::IndexOutOfBounds("Index out of bounds for get_mut operation".to_string()));
    }
    let mut current_ptr = list.head;
    for i in 0..index {
        current_ptr = raw_ptr_read(current_ptr, 0).next;
    }
    // raw_ptr_offset_mut ile doğrudan value'ya erişim sağlanmalı
    Result::Ok(raw_ptr_offset_mut(current_ptr, 0).value) // Assuming value field can be directly offset
}


/// Listedeki ilk elemanın immutable referansını döndürür. O(1)
/// Liste boşsa hata döner.
pub fn first<T>(list: &List<T>) -> Result<&T, Error> {
    if list.head == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot get first element of an empty list".to_string()));
    }
    Result::Ok(&raw_ptr_read(list.head, 0).value)
}

/// Listedeki ilk elemanın mutable referansını döndürür. O(1)
/// Liste boşsa hata döner.
pub fn first_mut<T>(list: &mut List<T>) -> Result<&mut T, Error> {
    if list.head == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot get first element of an empty list".to_string()));
    }
    Result::Ok(raw_ptr_offset_mut(list.head, 0).value)
}

/// Listedeki son elemanın immutable referansını döndürür. O(1)
/// Liste boşsa hata döner.
pub fn last<T>(list: &List<T>) -> Result<&T, Error> {
    if list.tail == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot get last element of an empty list".to_string()));
    }
    Result::Ok(&raw_ptr_read(list.tail, 0).value)
}

/// Listedeki son elemanın mutable referansını döndürür. O(1)
/// Liste boşsa hata döner.
pub fn last_mut<T>(list: &mut List<T>) -> Result<&mut T, Error> {
    if list.tail == null_ptr() {
        return Result::Err(Error::ListEmpty("Cannot get last element of an empty list".to_string()));
    }
    Result::Ok(raw_ptr_offset_mut(list.tail, 0).value)
}


// --- 4. Bilgi ve Durum Sorgulama ---

/// Listedeki geçerli eleman sayısını döndürür.
pub fn len<T>(list: &List<T>) -> int {
    list.len
}

/// Listenin boş olup olmadığını kontrol eder.
pub fn is_empty<T>(list: &List<T>) -> bool {
    list.len == 0
}

// --- 5. İterasyon (Idealde bir Iterator trait/interface'i ile) ---

// CNT'nin iterator mekanizması varsa, burada Iterator trait'i implemente edilebilir.
// Şimdilik, düğümler üzerinde manuel gezinme veya indeksle gezmek için döngü kullanılabilir.

 pub fn iter<T>(list: &List<T>) -> Iterator<T> { ... }
 pub fn iter_mut<T>(list: &mut List<T>) -> MutableIterator<T> { ... }

// --- Dahili Yardımcı Fonksiyonlar (Tekrar eden not) ---
// Bu fonksiyonlar, raw_ptr ile çalışmak için CNT'nin runtime veya compiler tarafından
// sağlandığı varsayılır.
// `size_of<T>()` : T tipinin boyutunu byte cinsinden döndürür.
// `null_ptr()`    : Boş bir raw_ptr döndürür.
// `raw_ptr_read(ptr, offset)`: `ptr`'den `offset` byte ötedeki T değerini okur.
// `raw_ptr_write(ptr, offset, value)`: `ptr`'den `offset` byte ötedeki T değerine `value` yazar.
// `raw_ptr_offset(ptr, offset)`: `ptr`'den `offset` kadar offsetlenmiş bir T referansı döndürür.
// `raw_ptr_offset_mut(ptr, offset)`: `ptr`'den `offset` kadar offsetlenmiş bir mutable T referansı döndürür.
