// ratio.cnt
// Standart Ratio (Oran) Modülü
// Derleme zamanı rasyonel sayıları (kesirleri) temsil eder ve üzerinde aritmetik işlemler yapar.

import std::string;     // Hata mesajları için (derleme zamanı hatası durumunda)
import std::assert;     // Derleme zamanı doğrulamaları için
import std::numeric;    // Ortak bölen (GCD) hesaplaması için (derleme zamanı versiyonu)

// Not: Bu modül tamamen derleme zamanı meta-programlama yeteneklerine dayanır.
// `struct`'lar içerisindeki `value` sabitleri, derleyici tarafından hesaplanacaktır.
// `constexpr` veya benzeri bir kavramın CNT'de var olduğu varsayılmaktadır.

// --- 0. Yardımcı Fonksiyonlar (Derleme Zamanı GCD) ---
// GCD (En Büyük Ortak Bölen) hesaplaması, oranları sadeleştirmek için kullanılır.
// Bu, derleme zamanında çalışacak şekilde tasarlanmıştır.

// `gcd_constexpr`: İki tamsayının en büyük ortak bölenini derleme zamanında hesaplar.
// Negatif sayılar için mutlak değerleriyle çalışır.
pub fn gcd_constexpr(a: i64, b: i64) -> i64 {
    let mut num1 = if a < 0 { -a } else { a };
    let mut num2 = if b < 0 { -b } else { b };

    while num2 != 0 {
        let temp = num2;
        num2 = num1 % num2;
        num1 = temp;
    }
    num1
}


// --- 1. Ratio Yapısı ---

/// `Ratio<Num, Denom>` Struct'ı: Derleme zamanı bir rasyonel sayıyı (kesiri) temsil eder.
///
/// # Şablon Parametreleri
/// - `Num`: Pay (numerator). `i64` tipinde bir derleme zamanı sabiti.
/// - `Denom`: Payda (denominator). `i64` tipinde bir derleme zamanı sabiti, sıfır olamaz.
///
/// `Denom` sıfır olamaz. Eğer `Denom` sıfır olarak geçilirse, bu derleme zamanı hatasına neden olmalıdır.
/// Oran otomatik olarak en sade haline getirilir ve işaret kuralı uygulanır:
/// Payda her zaman pozitif olur; işaret paya taşınır.
pub struct Ratio<Num: i64, Denom: i64>
where
    Denom != 0, // Derleme zamanı kontrolü: Denom sıfır olamaz.
{
    // Sadeleştirilmiş pay ve payda değerleri
    pub const NUM: i64 = {
        let common = gcd_constexpr(Num, Denom);
        if Denom < 0 {
            -Num / common
        } else {
            Num / common
        }
    };
    pub const DENOM: i64 = {
        let common = gcd_constexpr(Num, Denom);
        if Denom < 0 {
            -Denom / common
        } else {
            Denom / common
        }
    };
}

// --- 2. Ratio Aritmetik Operasyonları (Derleme Zamanı) ---

// İki Ratio nesnesini toplar.
// Resulting ratio: (N1*D2 + N2*D1) / (D1*D2)
pub struct RatioAdd<R1: Ratio, R2: Ratio> {
    pub const NUM: i64 = R1.NUM * R2.DENOM + R2.NUM * R1.DENOM;
    pub const DENOM: i64 = R1.DENOM * R2.DENOM;
}

// İki Ratio nesnesini çıkarır.
// Resulting ratio: (N1*D2 - N2*D1) / (D1*D2)
pub struct RatioSubtract<R1: Ratio, R2: Ratio> {
    pub const NUM: i64 = R1.NUM * R2.DENOM - R2.NUM * R1.DENOM;
    pub const DENOM: i64 = R1.DENOM * R2.DENOM;
}

// İki Ratio nesnesini çarpar.
// Resulting ratio: (N1*N2) / (D1*D2)
pub struct RatioMultiply<R1: Ratio, R2: Ratio> {
    pub const NUM: i64 = R1.NUM * R2.NUM;
    pub const DENOM: i64 = R1.DENOM * R2.DENOM;
}

// İki Ratio nesnesini böler.
// Resulting ratio: (N1*D2) / (D1*N2)
// Not: R2.NUM sıfır olamaz.
pub struct RatioDivide<R1: Ratio, R2: Ratio>
where
    R2.NUM != 0, // Derleme zamanı kontrolü: Bölenin payı sıfır olamaz.
{
    pub const NUM: i64 = R1.NUM * R2.DENOM;
    pub const DENOM: i64 = R1.DENOM * R2.NUM;
}

// --- 3. Ratio Karşılaştırma Operasyonları (Derleme Zamanı) ---

// İki Ratio nesnesinin eşit olup olmadığını kontrol eder.
pub struct RatioEqual<R1: Ratio, R2: Ratio> {
    pub const VALUE: bool = R1.NUM == R2.NUM && R1.DENOM == R2.DENOM;
}

// Bir Ratio nesnesinin diğerinden küçük olup olmadığını kontrol eder.
// Çapraz çarpım yöntemi: N1*D2 < N2*D1
pub struct RatioLess<R1: Ratio, R2: Ratio> {
    pub const VALUE: bool = R1.NUM * R2.DENOM < R2.NUM * R1.DENOM;
}

// --- 4. Önceden Tanımlanmış SI Birim Oranları ---
// `Ratio` kullanarak yaygın SI öneklerini tanımla.

pub const EXA: Ratio<1_000_000_000_000_000_000, 1> = Ratio { NUM: 1_000_000_000_000_000_000, DENOM: 1 };
pub const PETA: Ratio<1_000_000_000_000_000, 1> = Ratio { NUM: 1_000_000_000_000_000, DENOM: 1 };
pub const TERA: Ratio<1_000_000_000_000, 1> = Ratio { NUM: 1_000_000_000_000, DENOM: 1 };
pub const GIGA: Ratio<1_000_000_000, 1> = Ratio { NUM: 1_000_000_000, DENOM: 1 };
pub const MEGA: Ratio<1_000_000, 1> = Ratio { NUM: 1_000_000, DENOM: 1 };
pub const KILO: Ratio<1_000, 1> = Ratio { NUM: 1_000, DENOM: 1 };
pub const HECTO: Ratio<100, 1> = Ratio { NUM: 100, DENOM: 1 };
pub const DECA: Ratio<10, 1> = Ratio { NUM: 10, DENOM: 1 };

pub const DECI: Ratio<1, 10> = Ratio { NUM: 1, DENOM: 10 };
pub const CENTI: Ratio<1, 100> = Ratio { NUM: 1, DENOM: 100 };
pub const MILLI: Ratio<1, 1_000> = Ratio { NUM: 1, DENOM: 1_000 };
pub const MICRO: Ratio<1, 1_000_000> = Ratio { NUM: 1, DENOM: 1_000_000 };
pub const NANO: Ratio<1, 1_000_000_000> = Ratio { NUM: 1, DENOM: 1_000_000_000 };
pub const PICO: Ratio<1, 1_000_000_000_000> = Ratio { NUM: 1, DENOM: 1_000_000_000_000 };
pub const FEMTO: Ratio<1, 1_000_000_000_000_000> = Ratio { NUM: 1, DENOM: 1_000_000_000_000_000 };
pub const ATTO: Ratio<1, 1_000_000_000_000_000_000> = Ratio { NUM: 1, DENOM: 1_000_000_000_000_000_000 };


// --- Örnek Kullanım ---

fn main() {
    println("Starting Ratio example (compile-time values)...".to_string());

    // Ratio oluşturma ve sadeleştirme
    type MyRatio1 = Ratio<2, 4>; // Otomatik olarak Ratio<1, 2> olacak
    println("MyRatio1: ".to_string() + MyRatio1.NUM.to_string() + "/" + MyRatio1.DENOM.to_string());
    assert!(MyRatio1.NUM == 1 && MyRatio1.DENOM == 2, "MyRatio1 sadeleşmedi!");

    type MyRatio2 = Ratio<3, -6>; // Otomatik olarak Ratio<-1, 2> olacak
    println("MyRatio2: ".to_string() + MyRatio2.NUM.to_string() + "/" + MyRatio2.DENOM.to_string());
    assert!(MyRatio2.NUM == -1 && MyRatio2.DENOM == 2, "MyRatio2 sadeleşmedi veya işaret hatası!");

    type MyRatio3 = Ratio<10, 3>;
    println("MyRatio3: ".to_string() + MyRatio3.NUM.to_string() + "/" + MyRatio3.DENOM.to_string());

    // Aritmetik işlemler
    type SumRatio = RatioAdd<MyRatio1, MyRatio3>; // (1/2) + (10/3) = (3+20)/6 = 23/6
    println("SumRatio: ".to_string() + SumRatio.NUM.to_string() + "/" + SumRatio.DENOM.to_string());
    assert!(SumRatio.NUM == 23 && SumRatio.DENOM == 6, "SumRatio yanlış hesaplandı!");

    type ProductRatio = RatioMultiply<MyRatio1, MyRatio3>; // (1/2) * (10/3) = 10/6 = 5/3
    println("ProductRatio: ".to_string() + ProductRatio.NUM.to_string() + "/" + ProductRatio.DENOM.to_string());
    assert!(ProductRatio.NUM == 5 && ProductRatio.DENOM == 3, "ProductRatio yanlış hesaplandı!");

    type DivRatio = RatioDivide<MyRatio3, MyRatio1>; // (10/3) / (1/2) = (10*2)/(3*1) = 20/3
    println("DivRatio: ".to_string() + DivRatio.NUM.to_string() + "/" + DivRatio.DENOM.to_string());
    assert!(DivRatio.NUM == 20 && DivRatio.DENOM == 3, "DivRatio yanlış hesaplandı!");

    // Karşılaştırma
    type IsEqual = RatioEqual<Ratio<1, 2>, MyRatio1>;
    println("Ratio<1,2> == MyRatio1: ".to_string() + IsEqual.VALUE.to_string());
    assert!(IsEqual.VALUE == true, "Eşitlik kontrolü yanlış!");

    type IsLess = RatioLess<Ratio<1, 3>, Ratio<1, 2>>;
    println("Ratio<1,3> < Ratio<1,2>: ".to_string() + IsLess.VALUE.to_string());
    assert!(IsLess.VALUE == true, "Küçüklük kontrolü yanlış!");

    // Önceden tanımlanmış oranlar
    println("MILLI.NUM: ".to_string() + MILLI.NUM.to_string() + ", MILLI.DENOM: ".to_string() + MILLI.DENOM.to_string());
    println("KILO.NUM: ".to_string() + KILO.NUM.to_string() + ", KILO.DENOM: ".to_string() + KILO.DENOM.to_string());
    assert!(MILLI.NUM == 1 && MILLI.DENOM == 1000, "MILLI yanlış tanımlı!");
    assert!(KILO.NUM == 1000 && KILO.DENOM == 1, "KILO yanlış tanımlı!");

    // Derleme zamanı hata testi (Derleyici bu satırda hata vermelidir)
    // type InvalidRatio = Ratio<1, 0>; // Expected compile-time error: Denom cannot be zero.

    println("Ratio example finished.".to_string());
}
