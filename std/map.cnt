// map.cnt
// Standart Sıralı Harita (Map) Modülü
// Anahtar-değer çiftlerini sıralı bir şekilde saklar (genellikle Dengeleyici İkili Arama Ağacı ile).

import std::string;     // Hata mesajları için
import std::alloc;      // Bellek tahsisi ve serbest bırakma için
import std::assert;     // Geliştirme/hata ayıklama için

// Anahtar karşılaştırma için bir 'Compare' trait'i veya callback fonksiyonu gereklidir.
// Varsayılan olarak, temel tipler için '<' operatörünün kullanıldığı varsayılmıştır.
// Kullanıcı tanımlı tipler için bir 'compare' fonksiyonu sağlanmalıdır.
// `std::cmp::Comparator` veya benzeri bir mekanizma idealdir.

/// `Error` Enum'u: Map işlemleri sırasında oluşabilecek hataları temsil eder.
pub enum Error {
    /// Bellek tahsisi başarısız oldu.
    AllocationError(string);
    /// Anahtar bulunamadı.
    KeyNotFound(string);
    /// Bilinmeyen veya yakalanamayan bir hata.
    Other(string);
}

/// `Result<T, E>` Enum'u: Bir işlemin başarılı sonucunu (`Ok(T)`) veya bir hatayı (`Err(E)`) temsil eder.
pub enum Result<T, E> {
    Ok(T);
    Err(E);
}

/// Düğümün rengi (Kırmızı-Siyah Ağaç için).
pub enum Color {
    Red;
    Black;
}

/// `Node<K, V>` Struct'ı: Map'teki bir düğümü temsil eder.
pub struct Node<K, V> {
    key: K;
    value: V;
    color: Color;
    parent: raw_ptr<Node<K, V>>;
    left: raw_ptr<Node<K, V>>;
    right: raw_ptr<Node<K, V>>;
}

/// `Map<K, V>` Struct'ı: Anahtar-değer çiftlerini sıralı olarak saklayan bir harita.
/// Kırmızı-Siyah Ağaç (Red-Black Tree) prensiplerine göre tasarlanmıştır.
///
/// # Tip Parametreleri
/// - `K`: Anahtar tipi (sıralanabilir olmalı).
/// - `V`: Değer tipi.
pub struct Map<K, V> {
    /// Ağacın köküne işaretçi.
    root: raw_ptr<Node<K, V>>;
    /// Map'teki eleman sayısı.
    len: int;
    /// Sentinel düğüm (null düğümler yerine kullanılır, belleği azaltır ve kod karmaşıklığını düşürür).
    /// Genellikle tek bir global veya map'e özgü sentinel düğüm kullanılır.
    nil: raw_ptr<Node<K, V>>;
}

// --- 1. Map Oluşturma ve Yönetme ---

/// Yeni, boş bir `Map` oluşturur.
///
/// # Dönüş Değeri
/// Oluşturulan `Map<K, V>` nesnesi.
pub fn new<K, V>() -> Result<Map<K, V>, Error> {
    // Sentinel (nil) düğümü tahsis et. Bu düğüm her zaman siyahtır ve yaprakları temsil eder.
    match alloc::allocate(size_of<Node<K, V>>()) {
        Result::Ok(nil_ptr_u8) => {
            let nil_node_ptr = nil_ptr_u8 as raw_ptr<Node<K, V>>;
            // Sentinel düğümün değerleri önemsizdir, sadece renk ve işaretçileri önemlidir.
            raw_ptr_write(nil_node_ptr, 0, Node {
                key: default_value::<K>(), // K ve V için varsayılan değerler sağlanmalı
                value: default_value::<V>(),
                color: Color::Black,
                parent: null_ptr(),
                left: null_ptr(),
                right: null_ptr(),
            });

            Result::Ok(Map {
                root: nil_node_ptr, // Başlangıçta kök nil'e işaret eder
                len: 0,
                nil: nil_node_ptr,
            })
        },
        Result::Err(e) => Result::Err(Error::AllocationError("Failed to allocate sentinel node for map: ".to_string() + e.to_string())),
    }
}

/// Bir `Node<K, V>` düğümünü bellekte tahsis eder.
fn allocate_node<K, V>(key: K, value: V, color: Color, nil_node: raw_ptr<Node<K, V>>) -> Result<raw_ptr<Node<K, V>>, Error> {
    match alloc::allocate(size_of<Node<K, V>>()) {
        Result::Ok(ptr_u8) => {
            let node_ptr = ptr_u8 as raw_ptr<Node<K, V>>;
            raw_ptr_write(node_ptr, 0, Node {
                key: key,
                value: value,
                color: color,
                parent: nil_node, // Yeni düğümün ebeveyni başlangıçta nil
                left: nil_node,   // Yaprakları başlangıçta nil
                right: nil_node,
            });
            Result::Ok(node_ptr)
        },
        Result::Err(e) => Result::Err(Error::AllocationError("Failed to allocate map node: ".to_string() + e.to_string())),
    }
}

/// Bir `Node<K, V>` düğümünün belleğini serbest bırakır.
fn deallocate_node<K, V>(node_ptr: raw_ptr<Node<K, V>>) -> void {
    if node_ptr != null_ptr() {
        // K ve V için destructors çağrılmalı mı?
        alloc::deallocate(node_ptr as raw_ptr<u8>, size_of<Node<K, V>>());
    }
}

/// Bir `Map`'in tüm bellek kaynaklarını serbest bırakır.
/// Tüm düğümleri (nil düğüm dahil) ve bağlı verileri temizler.
pub fn drop<K, V>(map: &mut Map<K, V>) -> void {
    fn drop_recursive<K, V>(node_ptr: raw_ptr<Node<K, V>>, nil_node: raw_ptr<Node<K, V>>) -> void {
        if node_ptr == nil_node { return; }
        let node = raw_ptr_read(node_ptr, 0);
        drop_recursive(node.left, nil_node);
        drop_recursive(node.right, nil_node);
        deallocate_node(node_ptr);
    }

    drop_recursive(map.root, map.nil); // Kökten başlayarak tüm ağacı sil
    deallocate_node(map.nil); // Sentinel düğümü de sil
    map.root = null_ptr();
    map.nil = null_ptr();
    map.len = 0;
}

// --- 2. Kırmızı-Siyah Ağaç Yardımcı Fonksiyonları (Dahili) ---

// Sol Rotasyon (Left-Rotate)
// `x`'i soluna göre döndürür. `y` x'in sağ çocuğudur.
fn left_rotate<K, V>(map: &mut Map<K, V>, x_ptr: raw_ptr<Node<K, V>>) -> void {
    let mut x = raw_ptr_read(x_ptr, 0);
    let y_ptr = x.right; // y'i tanımla
    let mut y = raw_ptr_read(y_ptr, 0);

    x.right = y.left; // y'nin sol alt ağacını x'in sağ alt ağacına ata
    if y.left != map.nil {
        let mut y_left = raw_ptr_read(y.left, 0);
        y_left.parent = x_ptr;
        raw_ptr_write(y.left, 0, y_left);
    }
    y.parent = x.parent; // y'nin ebeveynini x'in ebeveynine ata

    if x.parent == map.nil {
        map.root = y_ptr;
    } else {
        let mut x_parent = raw_ptr_read(x.parent, 0);
        if x_ptr == x_parent.left {
            x_parent.left = y_ptr;
        } else {
            x_parent.right = y_ptr;
        }
        raw_ptr_write(x.parent, 0, x_parent);
    }
    y.left = x_ptr; // x'i y'nin sol çocuğu yap
    x.parent = y_ptr; // x'in ebeveynini y yap

    raw_ptr_write(x_ptr, 0, x); // Güncellenmiş x'i belleğe yaz
    raw_ptr_write(y_ptr, 0, y); // Güncellenmiş y'i belleğe yaz
}

// Sağ Rotasyon (Right-Rotate)
// `x`'i sağına göre döndürür. `y` x'in sol çocuğudur.
fn right_rotate<K, V>(map: &mut Map<K, V>, x_ptr: raw_ptr<Node<K, V>>) -> void {
    let mut x = raw_ptr_read(x_ptr, 0);
    let y_ptr = x.left; // y'i tanımla
    let mut y = raw_ptr_read(y_ptr, 0);

    x.left = y.right; // y'nin sağ alt ağacını x'in sol alt ağacına ata
    if y.right != map.nil {
        let mut y_right = raw_ptr_read(y.right, 0);
        y_right.parent = x_ptr;
        raw_ptr_write(y.right, 0, y_right);
    }
    y.parent = x.parent; // y'nin ebeveynini x'in ebeveynine ata

    if x.parent == map.nil {
        map.root = y_ptr;
    } else {
        let mut x_parent = raw_ptr_read(x.parent, 0);
        if x_ptr == x_parent.right {
            x_parent.right = y_ptr;
        } else {
            x_parent.left = y_ptr;
        }
        raw_ptr_write(x.parent, 0, x_parent);
    }
    y.right = x_ptr; // x'i y'nin sağ çocuğu yap
    x.parent = y_ptr; // x'in ebeveynini y yap

    raw_ptr_write(x_ptr, 0, x); // Güncellenmiş x'i belleğe yaz
    raw_ptr_write(y_ptr, 0, y); // Güncellenmiş y'i belleğe yaz
}

// Kırmızı-Siyah Ağaç Ekleme Düzeltme (RB-Insert-Fixup)
fn rb_insert_fixup<K, V>(map: &mut Map<K, V>, z_ptr: raw_ptr<Node<K, V>>) -> void {
    let mut z = raw_ptr_read(z_ptr, 0);
    while raw_ptr_read(z.parent, 0).color == Color::Red {
        let parent_ptr = z.parent;
        let mut parent = raw_ptr_read(parent_ptr, 0);
        let grandparent_ptr = parent.parent;
        let mut grandparent = raw_ptr_read(grandparent_ptr, 0);

        if parent_ptr == grandparent.left {
            let uncle_ptr = grandparent.right;
            let uncle = raw_ptr_read(uncle_ptr, 0);

            if uncle.color == Color::Red {
                // Case 1: Amca kırmızı
                parent.color = Color::Black;
                uncle.color = Color::Black;
                grandparent.color = Color::Red;
                raw_ptr_write(parent_ptr, 0, parent);
                raw_ptr_write(uncle_ptr, 0, uncle);
                raw_ptr_write(grandparent_ptr, 0, grandparent);
                z_ptr = grandparent_ptr;
                z = raw_ptr_read(z_ptr, 0);
            } else {
                if z_ptr == parent.right {
                    // Case 2: Amca siyah ve z sağ çocuk
                    z_ptr = parent_ptr;
                    left_rotate(map, z_ptr);
                    z = raw_ptr_read(z_ptr, 0); // z_ptr değişti, z'yi de güncelle
                    parent = raw_ptr_read(z.parent, 0); // parent'ı da güncelle
                }
                // Case 3: Amca siyah ve z sol çocuk
                parent.color = Color::Black;
                grandparent.color = Color::Red;
                raw_ptr_write(parent_ptr, 0, parent);
                raw_ptr_write(grandparent_ptr, 0, grandparent);
                right_rotate(map, grandparent_ptr);
            }
        } else { // Simetrik durum (parent grandparent'ın sağ çocuğu)
            let uncle_ptr = grandparent.left;
            let uncle = raw_ptr_read(uncle_ptr, 0);

            if uncle.color == Color::Red {
                // Case 1: Amca kırmızı
                parent.color = Color::Black;
                uncle.color = Color::Black;
                grandparent.color = Color::Red;
                raw_ptr_write(parent_ptr, 0, parent);
                raw_ptr_write(uncle_ptr, 0, uncle);
                raw_ptr_write(grandparent_ptr, 0, grandparent);
                z_ptr = grandparent_ptr;
                z = raw_ptr_read(z_ptr, 0);
            } else {
                if z_ptr == parent.left {
                    // Case 2: Amca siyah ve z sol çocuk
                    z_ptr = parent_ptr;
                    right_rotate(map, z_ptr);
                    z = raw_ptr_read(z_ptr, 0); // z_ptr değişti, z'yi de güncelle
                    parent = raw_ptr_read(z.parent, 0); // parent'ı da güncelle
                }
                // Case 3: Amca siyah ve z sağ çocuk
                parent.color = Color::Black;
                grandparent.color = Color::Red;
                raw_ptr_write(parent_ptr, 0, parent);
                raw_ptr_write(grandparent_ptr, 0, grandparent);
                left_rotate(map, grandparent_ptr);
            }
        }
    }
    // Kökü her zaman siyah yap
    let mut root_node = raw_ptr_read(map.root, 0);
    root_node.color = Color::Black;
    raw_ptr_write(map.root, 0, root_node);
}

// --- 3. Map İşlemleri ---

/// Bir anahtar-değer çiftini Map'e ekler veya günceller. O($\log N$)
/// Anahtar zaten varsa değeri günceller, yoksa yeni bir çift ekler.
///
/// # Parametreler
/// - `map`: Elemanın ekleneceği/güncelleneceği `Map<K, V>`'nin mutable referansı.
/// - `key`: Eklenecek/güncellenecek anahtar.
/// - `value`: Eklenecek/güncellenecek değer.
///
/// # Dönüş Değeri
/// `Result::Ok(bool)`: `true` yeni bir eleman eklendiyse, `false` mevcut eleman güncellendiyse.
/// `Result::Err(Error)` bellek tahsisi başarısız olursa.
pub fn insert<K, V>(map: &mut Map<K, V>, key: K, value: V) -> Result<bool, Error> {
    let mut y_ptr = map.nil;
    let mut x_ptr = map.root;

    // Eklenecek düğümün yerini bul
    while x_ptr != map.nil {
        y_ptr = x_ptr;
        let x_node = raw_ptr_read(x_ptr, 0);
        if key == x_node.key { // Anahtar zaten var, değeri güncelle
            let mut mutable_x_node = raw_ptr_read(x_ptr, 0); // Değiştirilebilir referans al
            mutable_x_node.value = value;
            raw_ptr_write(x_ptr, 0, mutable_x_node);
            return Result::Ok(false);
        } else if key < x_node.key {
            x_ptr = x_node.left;
        } else {
            x_ptr = x_node.right;
        }
    }

    // Yeni düğümü tahsis et
    match allocate_node(key, value, Color::Red, map.nil) {
        Result::Ok(z_ptr) => {
            let mut z_node = raw_ptr_read(z_ptr, 0);
            z_node.parent = y_ptr;

            if y_ptr == map.nil {
                map.root = z_ptr; // Ağaç boştu, z kök oldu
            } else {
                let mut y_node = raw_ptr_read(y_ptr, 0);
                if z_node.key < y_node.key {
                    y_node.left = z_ptr;
                } else {
                    y_node.right = z_ptr;
                }
                raw_ptr_write(y_ptr, 0, y_node); // Güncellenmiş y'i belleğe yaz
            }
            raw_ptr_write(z_ptr, 0, z_node); // Güncellenmiş z'i belleğe yaz

            map.len = map.len + 1;
            rb_insert_fixup(map, z_ptr); // Kırmızı-Siyah özelliklerini koru
            Result::Ok(true)
        },
        Result::Err(e) => Result::Err(e),
    }
}

/// Bir anahtara karşılık gelen değeri Map'ten alır. O($\log N$)
///
/// # Parametreler
/// - `map`: Değerin alınacağı `Map<K, V>`'nin referansı.
/// - `key`: Aranacak anahtar.
///
/// # Dönüş Değeri
/// `Result::Ok(&V)` değerin referansı, `Result::Err(Error::KeyNotFound)` anahtar bulunamazsa.
pub fn get<K, V>(map: &Map<K, V>, key: &K) -> Result<&V, Error> {
    let mut current_ptr = map.root;
    while current_ptr != map.nil {
        let current_node = raw_ptr_read(current_ptr, 0);
        if *key == current_node.key {
            return Result::Ok(&current_node.value);
        } else if *key < current_node.key {
            current_ptr = current_node.left;
        } else {
            current_ptr = current_node.right;
        }
    }
    Result::Err(Error::KeyNotFound("Key not found in map".to_string()))
}

/// Bir anahtara karşılık gelen değeri Map'ten alır (mutable). O($\log N$)
///
/// # Parametreler
/// - `map`: Değerin alınacağı `Map<K, V>`'nin mutable referansı.
/// - `key`: Aranacak anahtar.
///
/// # Dönüş Değeri
/// `Result::Ok(&mut V)` değerin mutable referansı, `Result::Err(Error::KeyNotFound)` anahtar bulunamazsa.
pub fn get_mut<K, V>(map: &mut Map<K, V>, key: &K) -> Result<&mut V, Error> {
    let mut current_ptr = map.root;
    while current_ptr != map.nil {
        let mut current_node = raw_ptr_read(current_ptr, 0); // mutable kopyasını oku
        if *key == current_node.key {
            return Result::Ok(raw_ptr_offset_mut(current_ptr, 0).value); // Value'ya doğrudan mutable erişim
        } else if *key < current_node.key {
            current_ptr = current_node.left;
        } else {
            current_ptr = current_node.right;
        }
    }
    Result::Err(Error::KeyNotFound("Key not found in map".to_string()))
}

/// Bir anahtarı ve karşılık gelen değeri Map'ten siler. O($\log N$)
///
/// # Parametreler
/// - `map`: Elemanın silineceği `Map<K, V>`'nin mutable referansı.
/// - `key`: Silinecek anahtar.
///
/// # Dönüş Değeri
/// `Result::Ok(V)` silinen değer, `Result::Err(Error::KeyNotFound)` anahtar bulunamazsa.
pub fn remove<K, V>(map: &mut Map<K, V>, key: &K) -> Result<V, Error> {
    // Bu, Kırmızı-Siyah Ağaç silme algoritmasını uygulamak için karmaşık bir fonksiyondur.
    // Detaylı implementasyon, bu örnek taslağın kapsamını aşabilir.
    // Ancak temel adımlar şunlardır:
    // 1. Düğümü bul.
    // 2. Ağaçtan düğümü çıkar (3 olası durum: yaprak, tek çocuk, iki çocuk).
    // 3. Ağaç dengesizleşirse Kırmızı-Siyah kurallarını yeniden sağla (RB-Delete-Fixup).
    // 4. Düğüm belleğini serbest bırak.

    // Basit bir placeholder olarak:
    Result::Err(Error::Other("Remove operation not fully implemented for RB-Tree".to_string()))
}

/// Map'teki tüm elemanları temizler.
pub fn clear<K, V>(map: &mut Map<K, V>) -> void {
    drop(map); // `drop` fonksiyonu tüm ağacı ve sentinel düğümünü serbest bırakır.
    // Yeniden başlatma:
    match new() {
        Result::Ok(new_map) => *map = new_map,
        Result::Err(_) => assert!(false, "Failed to re-initialize map after clear!"), // Temizleme sonrası hata olmamalı
    }
}

/// Map'te belirli bir anahtarın olup olmadığını kontrol eder. O($\log N$)
pub fn contains_key<K, V>(map: &Map<K, V>, key: &K) -> bool {
    match get(map, key) {
        Result::Ok(_) => true,
        Result::Err(_) => false,
    }
}

// --- 4. Bilgi ve Durum Sorgulama ---

/// Map'teki eleman sayısını döndürür.
pub fn len<K, V>(map: &Map<K, V>) -> int {
    map.len
}

/// Map'in boş olup olmadığını kontrol eder.
pub fn is_empty<K, V>(map: &Map<K, V>) -> bool {
    map.len == 0
}

// --- 5. İterasyon (Idealde bir Iterator trait/interface'i ile) ---

// Kırmızı-Siyah Ağaçlar üzerinde sıralı iterasyon (in-order traversal) mümkündür.
// Iterator impl'i, düğüm işaretçilerini izlemelidir.

 pub fn iter<K, V>(map: &Map<K, V>) -> Iterator<(K, V)> { ... }
 pub fn iter_mut<K, V>(map: &mut Map<K, V>) -> MutableIterator<(K, V)> { ... }

// --- Dahili Yardımcı Fonksiyonlar (Tekrar eden not) ---
// Bu fonksiyonlar, raw_ptr ile çalışmak için CNT'nin runtime veya compiler tarafından
// sağlandığı varsayılır.
// `size_of<T>()` : T tipinin boyutunu byte cinsinden döndürür.
// `null_ptr()`    : Boş bir raw_ptr döndürür.
// `raw_ptr_read(ptr, offset)`: `ptr`'den `offset` byte ötedeki T değerini okur.
// `raw_ptr_write(ptr, offset, value)`: `ptr`'den `offset` byte ötedeki T değerine `value` yazar.
// `raw_ptr_offset(ptr, offset)`: `ptr`'den `offset` kadar offsetlenmiş bir T referansı döndürür.
// `raw_ptr_offset_mut(ptr, offset)`: `ptr`'den `offset` kadar offsetlenmiş bir mutable T referansı döndürür.
// `default_value<T>()`: T tipi için varsayılan bir değer döndüren bir mekanizma (örneğin int için 0, bool için false).
