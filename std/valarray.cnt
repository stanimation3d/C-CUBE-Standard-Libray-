// valarray.cnt
// Standart Valarray Modülü
// Sayısal dizilerle verimli matematiksel operasyonlar için tasarlanmış şablon sınıfı.

import std::string;     // Hata mesajları için
import std::vector;     // Dahili veri depolama için
import std::assert;     // Geliştirme/hata ayıklama için
import std::math;       // Matematiksel fonksiyonlar için

/// `Error` Enum'u: Valarray işlemleri sırasında oluşabilecek hataları temsil eder.
pub enum Error {
    /// Geçersiz boyut veya indeks.
    InvalidDimension(string);
    /// Diziler farklı boyutlara sahip.
    MismatchedDimensions(string);
    /// Geçersiz dilimleme parametreleri.
    InvalidSlice(string);
    /// Genel bir hata.
    Other(string);
}

/// `Result<T, E>` Enum'u: Bir işlemin başarılı sonucunu (`Ok(T)`) veya bir hatayı (`Err(E)`) temsil eder.
pub enum Result<T, E> {
    Ok(T);
    Err(E);
}

// --- 1. Valarray Yapısı ---

/// `Valarray<T>` Struct'ı: Sayısal dizilerle çalışmak için tasarlanmış şablon sınıfı.
/// `T` tipi sayısal olmalıdır (i8, i16, i32, i64, f32, f64 vb.).
pub struct Valarray<T> {
    data: std::vector::Vector<T>;
}

/// `new_valarray_size()`: Belirtilen boyutta, varsayılan değerlerle (0 veya benzeri) bir `Valarray` oluşturur.
///
/// # Parametreler
/// - `size`: Valarray'in boyutu. Sıfırdan büyük olmalıdır.
///
/// # Tip Parametreleri
/// - `T`: Valarray elemanlarının tipi.
///
/// # Dönüş Değeri
/// `Result<Valarray<T>, Error>`: Oluşturulan `Valarray` nesnesi veya hata.
pub fn new_valarray_size<T>(size: u64) -> Result<Valarray<T>, Error>
where T: DefaultValue + Numeric { // `DefaultValue` ve `Numeric` trait'leri varsayılmıştır.
    if size == 0 {
        return Result::Err(Error::InvalidDimension("Valarray size must be positive.".to_string()));
    }
    let mut data = std::vector::new_vector_with_capacity::<T>(size);
    for _ in 0..size {
        std::vector::push_back(&mut data, T.default_value());
    }
    Result::Ok(Valarray { data: data })
}

/// `new_valarray_fill()`: Belirtilen boyutta, verilen bir değerle doldurulmuş bir `Valarray` oluşturur.
///
/// # Parametreler
/// - `size`: Valarray'in boyutu. Sıfırdan büyük olmalıdır.
/// - `value`: Diziyi dolduracak değer.
///
/// # Tip Parametreleri
/// - `T`: Valarray elemanlarının tipi.
///
/// # Dönüş Değeri
/// `Result<Valarray<T>, Error>`: Oluşturulan `Valarray` nesnesi veya hata.
pub fn new_valarray_fill<T>(size: u64, value: T) -> Result<Valarray<T>, Error>
where T: Copy + Numeric {
    if size == 0 {
        return Result::Err(Error::InvalidDimension("Valarray size must be positive.".to_string()));
    }
    let mut data = std::vector::new_vector_with_capacity::<T>(size);
    for _ in 0..size {
        std::vector::push_back(&mut data, value);
    }
    Result::Ok(Valarray { data: data })
}

/// `new_valarray_from_vector()`: Bir `std::vector`'dan yeni bir `Valarray` oluşturur.
pub fn new_valarray_from_vector<T>(vec: std::vector::Vector<T>) -> Result<Valarray<T>, Error>
where T: Copy + Numeric {
    if std::vector::len(&vec) == 0 {
        return Result::Err(Error::InvalidDimension("Cannot create Valarray from empty vector.".to_string()));
    }
    Result::Ok(Valarray { data: vec })
}

/// `len()`: Valarray'in boyutunu döndürür.
pub fn len<T>(va: &Valarray<T>) -> u64 {
    std::vector::len(&va.data)
}

/// `get()`: Belirtilen indeksteki elemanı döndürür.
pub fn get<T>(va: &Valarray<T>, index: u64) -> Result<T, Error>
where T: Copy {
    if index >= len(va) {
        return Result::Err(Error::InvalidDimension("Index out of bounds.".to_string()));
    }
    Result::Ok(std::vector::get(&va.data, index).expect("Internal vector access failed"))
}

/// `set()`: Belirtilen indeksteki elemanı ayarlar.
pub fn set<T>(va: &mut Valarray<T>, index: u64, value: T) -> Result<void, Error>
where T: Copy {
    if index >= len(va) {
        return Result::Err(Error::InvalidDimension("Index out of bounds.".to_string()));
    }
    std::vector::set(&mut va.data, index, value).expect("Internal vector set failed");
    Result::Ok(())
}

/// `resize()`: Valarray'in boyutunu yeniden ayarlar. Yeni elemanlar varsayılan değerle doldurulur.
pub fn resize<T>(va: &mut Valarray<T>, new_size: u64) -> Result<void, Error>
where T: DefaultValue + Numeric {
    if new_size == 0 {
        return Result::Err(Error::InvalidDimension("New size must be positive.".to_string()));
    }
    std::vector::resize(&mut va.data, new_size, T.default_value()).expect("Vector resize failed");
    Result::Ok(())
}


// --- 2. Element-wise Operasyonlar ---

// C++'daki gibi operatör aşırı yüklemesi yoksa, fonksiyonlar olarak tanımlanır.
// Aşağıdaki fonksiyonlar, yeni bir Valarray döndürür.

/// `add()`: İki Valarray'i eleman bazında toplar.
pub fn add<T>(lhs: &Valarray<T>, rhs: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Add + Numeric {
    if len(lhs) != len(rhs) {
        return Result::Err(Error::MismatchedDimensions("Valarrays must have the same size for addition.".to_string()));
    }
    let mut result = new_valarray_size::<T>(len(lhs))?;
    for i in 0..len(lhs) {
        let val = (get(lhs, i)? + get(rhs, i)?);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

/// `sub()`: İki Valarray'i eleman bazında çıkarır.
pub fn sub<T>(lhs: &Valarray<T>, rhs: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Subtract + Numeric {
    if len(lhs) != len(rhs) {
        return Result::Err(Error::MismatchedDimensions("Valarrays must have the same size for subtraction.".to_string()));
    }
    let mut result = new_valarray_size::<T>(len(lhs))?;
    for i in 0..len(lhs) {
        let val = (get(lhs, i)? - get(rhs, i)?);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

/// `mul()`: İki Valarray'i eleman bazında çarpar.
pub fn mul<T>(lhs: &Valarray<T>, rhs: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Multiply + Numeric {
    if len(lhs) != len(rhs) {
        return Result::Err(Error::MismatchedDimensions("Valarrays must have the same size for multiplication.".to_string()));
    }
    let mut result = new_valarray_size::<T>(len(lhs))?;
    for i in 0..len(lhs) {
        let val = (get(lhs, i)? * get(rhs, i)?);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

/// `div()`: İki Valarray'i eleman bazında böler. Sıfıra bölmeyi kontrol eder.
pub fn div<T>(lhs: &Valarray<T>, rhs: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Divide + Numeric + PartialEq + HasZero { // `HasZero` trait'i varsayılmıştır (T.zero()).
    if len(lhs) != len(rhs) {
        return Result::Err(Error::MismatchedDimensions("Valarrays must have the same size for division.".to_string()));
    }
    let mut result = new_valarray_size::<T>(len(lhs))?;
    for i in 0..len(lhs) {
        let divisor = get(rhs, i)?;
        if divisor == T.zero() {
            return Result::Err(Error::Other("Division by zero in valarray operation.".to_string()));
        }
        let val = (get(lhs, i)? / divisor);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

// --- 3. Skaler-Valarray Operasyonları ---

/// `add_scalar()`: Bir Valarray'e skaler bir değer ekler.
pub fn add_scalar<T>(lhs: &Valarray<T>, scalar: T) -> Result<Valarray<T>, Error>
where T: Add + Numeric {
    let mut result = new_valarray_size::<T>(len(lhs))?;
    for i in 0..len(lhs) {
        let val = (get(lhs, i)? + scalar);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

// Diğer skaler operasyonlar (sub_scalar, mul_scalar, div_scalar) benzer şekilde eklenebilir.

// --- 4. Matematiksel Fonksiyonlar (Element-wise) ---

/// `sqrt_valarray()`: Valarray'deki her elemanın karekökünü alır.
pub fn sqrt_valarray<T>(va: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Float + math::Sqrt { // `Float` ve `math::Sqrt` trait'leri varsayılmıştır.
    let mut result = new_valarray_size::<T>(len(va))?;
    for i in 0..len(va) {
        let val = math::sqrt(get(va, i)?);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

/// `sin_valarray()`: Valarray'deki her elemanın sinüsünü alır.
pub fn sin_valarray<T>(va: &Valarray<T>) -> Result<Valarray<T>, Error>
where T: Float + math::Sin {
    let mut result = new_valarray_size::<T>(len(va))?;
    for i in 0..len(va) {
        let val = math::sin(get(va, i)?);
        set(&mut result, i, val)?;
    }
    Result::Ok(result)
}

// Diğer matematiksel fonksiyonlar (cos, tan, log, exp vb.) benzer şekilde eklenebilir.

// --- 5. Agregasyon Fonksiyonları ---

/// `sum_valarray()`: Valarray'deki tüm elemanların toplamını döndürür.
pub fn sum_valarray<T>(va: &Valarray<T>) -> Result<T, Error>
where T: Add + Numeric + HasZero {
    if len(va) == 0 {
        return Result::Err(Error::InvalidDimension("Cannot sum an empty valarray.".to_string()));
    }
    let mut total = T.zero();
    for i in 0..len(va) {
        total = total + get(va, i)?;
    }
    Result::Ok(total)
}

/// `min_valarray()`: Valarray'deki en küçük elemanı döndürür.
pub fn min_valarray<T>(va: &Valarray<T>) -> Result<T, Error>
where T: PartialOrd + Copy + Numeric {
    if len(va) == 0 {
        return Result::Err(Error::InvalidDimension("Cannot find min of an empty valarray.".to_string()));
    }
    let mut min_val = get(va, 0)?;
    for i in 1..len(va) {
        let current_val = get(va, i)?;
        if current_val < min_val {
            min_val = current_val;
        }
    }
    Result::Ok(min_val)
}

// `max_valarray()` ve `avg_valarray()` benzer şekilde eklenebilir.

// --- 6. Dilimleme (Slice) ve Maskeleme (Gmask) ---

/// `ValarraySlice` Struct'ı: Valarray'in bir dilimini temsil eder.
/// Bu, Valarray'in bir alt görünümüdür (view), kendi verisine sahip değildir.
pub struct ValarraySlice<'a, T> {
    parent_data: &'a mut std::vector::Vector<T>;
    start_index: u64;
    size: u64;
    stride: u64;
}

/// `slice()`: Valarray'in bir dilimini oluşturur.
///
/// # Parametreler
/// - `va`: Dilimlenecek Valarray (mutable referans).
/// - `start`: Dilimin başlangıç indeksi.
/// - `size`: Dilimdeki eleman sayısı.
/// - `stride`: Elemanlar arasındaki atlama mesafesi.
///
/// # Dönüş Değeri
/// `Result<ValarraySlice<T>, Error>`: Oluşturulan dilim veya hata.
pub fn slice<'a, T>(va: &'a mut Valarray<T>, start: u64, size: u64, stride: u64) -> Result<ValarraySlice<'a, T>, Error> {
    if start >= len(va) && size > 0 {
        return Result::Err(Error::InvalidSlice("Slice start index out of bounds.".to_string()));
    }
    if stride == 0 {
        return Result::Err(Error::InvalidSlice("Slice stride cannot be zero.".to_string()));
    }
    // Maksimum indeks kontrolü
    if size > 0 && (start + (size - 1) * stride) >= len(va) {
        return Result::Err(Error::InvalidSlice("Slice extends beyond valarray bounds.".to_string()));
    }
    Result::Ok(ValarraySlice {
        parent_data: &mut va.data,
        start_index: start,
        size: size,
        stride: stride,
    })
}

/// `get_slice_element()`: Bir `ValarraySlice`'tan eleman alır.
pub fn get_slice_element<T>(slice: &ValarraySlice<T>, index_in_slice: u64) -> Result<T, Error>
where T: Copy {
    if index_in_slice >= slice.size {
        return Result::Err(Error::InvalidDimension("Index in slice out of bounds.".to_string()));
    }
    let actual_index = slice.start_index + index_in_slice * slice.stride;
    std::vector::get(slice.parent_data, actual_index)
        .map_err(|e| Error::Other("Internal slice access error: ".to_string() + e.to_string()))
}

/// `set_slice_element()`: Bir `ValarraySlice`'ta eleman ayarlar.
pub fn set_slice_element<T>(slice: &mut ValarraySlice<T>, index_in_slice: u64, value: T) -> Result<void, Error>
where T: Copy {
    if index_in_slice >= slice.size {
        return Result::Err(Error::InvalidDimension("Index in slice out of bounds.".to_string()));
    }
    let actual_index = slice.start_index + index_in_slice * slice.stride;
    std::vector::set(slice.parent_data, actual_index, value)
        .map_err(|e| Error::Other("Internal slice set error: ".to_string() + e.to_string()))
}


/// `ValarrayMask` Struct'ı: Valarray'in bir maskesi (bool Valarray) ile seçilen elemanları temsil eder.
/// Bu da bir alt görünümüdür.
pub struct ValarrayMask<'a, T> {
    parent_data: &'a mut std::vector::Vector<T>;
    mask_data: &'a Valarray<bool>;
}

/// `gmask()`: Bir `Valarray<bool>` maskesi kullanarak Valarray'in belirli elemanlarına erişim sağlar.
///
/// # Parametreler
/// - `va`: Maskelenecek Valarray (mutable referans).
/// - `mask`: Boolean Valarray maskesi.
///
/// # Dönüş Değeri
/// `Result<ValarrayMask<T>, Error>`: Oluşturulan maske görünümü veya hata.
pub fn gmask<'a, T>(va: &'a mut Valarray<T>, mask: &'a Valarray<bool>) -> Result<ValarrayMask<'a, T>, Error> {
    if len(va) != len(mask) {
        return Result::Err(Error::MismatchedDimensions("Mask valarray must have the same size as the target valarray.".to_string()));
    }
    Result::Ok(ValarrayMask {
        parent_data: &mut va.data,
        mask_data: mask,
    })
}

// Maskeleme görünümü üzerinde elemanlara erişim için fonksiyonlar:
// Bu fonksiyonlar, maskeye göre filtrelenmiş bir vektör veya iteratör döndürebilir.
// Basitlik için, örnek olarak maskeli bir valarray'den yeni bir valarray oluşturalım:

/// `extract_masked()`: Bir maske kullanarak Valarray'den yeni bir Valarray oluşturur.
pub fn extract_masked<T>(va: &Valarray<T>, mask: &Valarray<bool>) -> Result<Valarray<T>, Error>
where T: Copy + Numeric {
    if len(va) != len(mask) {
        return Result::Err(Error::MismatchedDimensions("Mask valarray must have the same size as the target valarray.".to_string()));
    }
    let mut result_vec = std::vector::new_vector::<T>();
    for i in 0..len(va) {
        if get(mask, i)? {
            std::vector::push_back(&mut result_vec, get(va, i)?);
        }
    }
    if std::vector::len(&result_vec) == 0 {
        // Eğer hiçbir eleman maskelenmemişse, boş bir valarray döndür.
        return new_valarray_size(1); // veya boş bir valarray'i temsil eden özel bir durum
    }
    new_valarray_from_vector(result_vec)
}

/// `set_masked()`: Bir maske kullanarak Valarray'in seçilen elemanlarını bir değerle ayarlar.
pub fn set_masked<T>(va: &mut Valarray<T>, mask: &Valarray<bool>, value: T) -> Result<void, Error>
where T: Copy {
    if len(va) != len(mask) {
        return Result::Err(Error::MismatchedDimensions("Mask valarray must have the same size as the target valarray.".to_string()));
    }
    for i in 0..len(va) {
        if get(mask, i)? {
            set(va, i, value)?;
        }
    }
    Result::Ok(())
}

// --- Örnek Kullanım ---

fn main() {
    println("Starting Valarray example...".to_string());

    // Valarray oluşturma
    let mut va1 = new_valarray_fill(5, 10.0f64).expect("Failed to create va1");
    println("va1: ".to_string() + va1.data.to_string()); // [10.0, 10.0, 10.0, 10.0, 10.0]

    let va2_vec = std::vector::from_array([1.0f64, 2.0, 3.0, 4.0, 5.0]);
    let va2 = new_valarray_from_vector(va2_vec).expect("Failed to create va2");
    println("va2: ".to_string() + va2.data.to_string()); // [1.0, 2.0, 3.0, 4.0, 5.0]

    // Element-wise toplama
    let va_sum = add(&va1, &va2).expect("Failed to add valarrays");
    println("va1 + va2: ".to_string() + va_sum.data.to_string()); // [11.0, 12.0, 13.0, 14.0, 15.0]

    // Skaler toplama
    let va_scalar_add = add_scalar(&va2, 100.0f64).expect("Failed to add scalar");
    println("va2 + 100: ".to_string() + va_scalar_add.data.to_string()); // [101.0, 102.0, 103.0, 104.0, 105.0]

    // Matematiksel fonksiyon
    let va_sqrt = sqrt_valarray(&va2).expect("Failed to calculate sqrt");
    println("sqrt(va2): ".to_string() + va_sqrt.data.to_string()); // [1.0, 1.414..., 1.732..., 2.0, 2.236...]

    // Agregasyon fonksiyonları
    let total_sum = sum_valarray(&va_sum).expect("Failed to sum va_sum");
    println("Sum of va_sum: ".to_string() + total_sum.to_string()); // 65.0

    let min_val = min_val_valarray(&va_sum).expect("Failed to find min in va_sum");
    println("Min of va_sum: ".to_string() + min_val.to_string()); // 11.0

    // Dilimleme
    let mut va_mutable = new_valarray_from_vector(std::vector::from_array([0.0f64, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])).expect("Failed to create mutable va");
    println("Original mutable va: ".to_string() + va_mutable.data.to_string());
    let mut slice_view = slice(&mut va_mutable, 1, 3, 2).expect("Failed to create slice"); // [1.0, 3.0, 5.0]
    println("Slice (start=1, size=3, stride=2): ".to_string() +
            get_slice_element(&slice_view, 0).expect("Get slice elem").to_string() + ", " +
            get_slice_element(&slice_view, 1).expect("Get slice elem").to_string() + ", " +
            get_slice_element(&slice_view, 2).expect("Get slice elem").to_string());

    set_slice_element(&mut slice_view, 1, 99.0f64).expect("Failed to set slice element"); // slice[1] (original index 3) = 99.0
    println("Modified mutable va via slice: ".to_string() + va_mutable.data.to_string()); // [0.0, 1.0, 2.0, 99.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]

    // Maskeleme
    let mask_vec = std::vector::from_array([true, false, true, false, true]);
    let va_mask = new_valarray_from_vector(mask_vec).expect("Failed to create mask valarray");

    let original_mask_target = new_valarray_from_vector(std::vector::from_array([10.0f64, 20.0, 30.0, 40.0, 50.0])).expect("Failed to create mask target");
    println("Original mask target: ".to_string() + original_mask_target.data.to_string());

    let extracted = extract_masked(&original_mask_target, &va_mask).expect("Failed to extract masked elements");
    println("Extracted (mask true): ".to_string() + extracted.data.to_string()); // [10.0, 30.0, 50.0]

    let mut masked_target_mutable = new_valarray_from_vector(std::vector::from_array([1.0f64, 2.0, 3.0, 4.0, 5.0])).expect("Failed to create mutable mask target");
    set_masked(&mut masked_target_mutable, &va_mask, 77.0f64).expect("Failed to set masked elements");
    println("Set masked (77.0): ".to_string() + masked_target_mutable.data.to_string()); // [77.0, 2.0, 77.0, 4.0, 77.0]

    println("Valarray example finished.".to_string());
}
