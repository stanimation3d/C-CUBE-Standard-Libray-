// limits.cnt
// Standart Sayısal Sınırlar Modülü
// Temel veri tiplerinin özelliklerini ve sınırlarını sağlar.

// Bu değerler derleyici tarafından veya derleme zamanında belirlenir
// ve burada sabitler (const) olarak sunulur.

// --- 1. Tam Sayı Tipleri İçin Sınırlar ---

// --- 1.1. `u8` (Unsigned 8-bit Integer) ---
/// `u8` tipinin minimum değeri.
pub const U8_MIN: u8 = 0u8;
/// `u8` tipinin maksimum değeri.
pub const U8_MAX: u8 = 255u8;
/// `u8` tipinin bit cinsinden boyutu.
pub const U8_BITS: int = 8;
/// `u8` tipinin byte cinsinden boyutu.
pub const U8_BYTES: int = 1;

// --- 1.2. `u16` (Unsigned 16-bit Integer) ---
/// `u16` tipinin minimum değeri.
pub const U16_MIN: u16 = 0u16;
/// `u16` tipinin maksimum değeri.
pub const U16_MAX: u16 = 65535u16;
/// `u16` tipinin bit cinsinden boyutu.
pub const U16_BITS: int = 16;
/// `u16` tipinin byte cinsinden boyutu.
pub const U16_BYTES: int = 2;

// --- 1.3. `u32` (Unsigned 32-bit Integer) ---
/// `u32` tipinin minimum değeri.
pub const U32_MIN: u32 = 0u32;
/// `u32` tipinin maksimum değeri.
pub const U32_MAX: u32 = 4294967295u32;
/// `u32` tipinin bit cinsinden boyutu.
pub const U32_BITS: int = 32;
/// `u32` tipinin byte cinsinden boyutu.
pub const U32_BYTES: int = 4;

// --- 1.4. `u64` (Unsigned 64-bit Integer) ---
/// `u64` tipinin minimum değeri.
pub const U64_MIN: u64 = 0u64;
/// `u64` tipinin maksimum değeri.
pub const U64_MAX: u64 = 18446744073709551615u64;
/// `u64` tipinin bit cinsinden boyutu.
pub const U64_BITS: int = 64;
/// `u64` tipinin byte cinsinden boyutu.
pub const U64_BYTES: int = 8;

// --- 1.5. `int` (Signed Integer - Platform Bağımlı Olabilir, genelde 32-bit) ---
// Not: `int` tipinin boyutu platforma göre değişebilir (genelde 32-bit).
// Eğer CNT belirli bir `int` boyutunu garanti etmiyorsa,
// bu değerler derleme zamanı ortamına göre belirlenmelidir.
// Varsayılan olarak 32-bit işaretli tam sayı kabul edelim.
/// `int` tipinin minimum değeri.
pub const INT_MIN: int = -2147483648;
/// `int` tipinin maksimum değeri.
pub const INT_MAX: int = 2147483647;
/// `int` tipinin bit cinsinden boyutu.
pub const INT_BITS: int = 32; // Varsayılan 32-bit
/// `int` tipinin byte cinsinden boyutu.
pub const INT_BYTES: int = 4; // Varsayılan 32-bit

// --- 1.6. `i8` (Signed 8-bit Integer) ---
/// `i8` tipinin minimum değeri.
pub const I8_MIN: i8 = -128i8;
/// `i8` tipinin maksimum değeri.
pub const I8_MAX: i8 = 127i8;
/// `i8` tipinin bit cinsinden boyutu.
pub const I8_BITS: int = 8;
/// `i8` tipinin byte cinsinden boyutu.
pub const I8_BYTES: int = 1;

// --- 1.7. `i16` (Signed 16-bit Integer) ---
/// `i16` tipinin minimum değeri.
pub const I16_MIN: i16 = -32768i16;
/// `i16` tipinin maksimum değeri.
pub const I16_MAX: i16 = 32767i16;
/// `i16` tipinin bit cinsinden boyutu.
pub const I16_BITS: int = 16;
/// `i16` tipinin byte cinsinden boyutu.
pub const I16_BYTES: int = 2;

// --- 1.8. `i32` (Signed 32-bit Integer) ---
/// `i32` tipinin minimum değeri.
pub const I32_MIN: i32 = -2147483648i32;
/// `i32` tipinin maksimum değeri.
pub const I32_MAX: i32 = 2147483647i32;
/// `i32` tipinin bit cinsinden boyutu.
pub const I32_BITS: int = 32;
/// `i32` tipinin byte cinsinden boyutu.
pub const I32_BYTES: int = 4;

// --- 1.9. `i64` (Signed 64-bit Integer) ---
/// `i64` tipinin minimum değeri.
pub const I64_MIN: i64 = -9223372036854775808i64;
/// `i64` tipinin maksimum değeri.
pub const I64_MAX: i64 = 9223372036854775807i64;
/// `i64` tipinin bit cinsinden boyutu.
pub const I64_BITS: int = 64;
/// `i64` tipinin byte cinsinden boyutu.
pub const I64_BYTES: int = 8;


// --- 2. Floating-Point Tipleri İçin Sınırlar ---
// Not: Floating-point sınırları, IEEE 754 standardına uygun olarak genellikle derleyici/platforma bağlıdır.
// Burada tipik IEEE 754 çift duyarlıklı (double) ve tek duyarlıklı (float) değerleri varsayılmıştır.

// --- 2.1. `float` (Single-Precision Floating-Point - Genelde 32-bit) ---
/// `float` tipinin pozitif en küçük normalleştirilmiş değeri.
pub const FLOAT_MIN: float = 1.17549435E-38f;
/// `float` tipinin pozitif en büyük değeri.
pub const FLOAT_MAX: float = 3.40282347E+38f;
/// `float` tipinin epsilon değeri (1.0 ile 1.0'dan büyük en küçük sayının farkı).
pub const FLOAT_EPSILON: float = 1.19209290E-7f;
/// `float` tipinin en küçük subnormal (denormalized) pozitif değeri.
pub const FLOAT_DENORM_MIN: float = 1.40129846E-45f;
/// `float` tipinin basamak (ondalık hane) cinsinden duyarlılığı.
pub const FLOAT_DIGITS: int = 6;
/// `float` tipinin bit cinsinden boyutu.
pub const FLOAT_BITS: int = 32;
/// `float` tipinin byte cinsinden boyutu.
pub const FLOAT_BYTES: int = 4;
/// `float` için sonsuzluk değeri.
pub const FLOAT_INFINITY: float = inf; // CNT'de 'inf' veya benzeri bir literal varsayılır
/// `float` için "sayı değil" (Not-a-Number) değeri.
pub const FLOAT_NAN: float = nan; // CNT'de 'nan' veya benzeri bir literal varsayılır

// --- 2.2. `double` (Double-Precision Floating-Point - Genelde 64-bit) ---
/// `double` tipinin pozitif en küçük normalleştirilmiş değeri.
pub const DOUBLE_MIN: double = 2.2250738585072014E-308;
/// `double` tipinin pozitif en büyük değeri.
pub const DOUBLE_MAX: double = 1.7976931348623157E+308;
/// `double` tipinin epsilon değeri (1.0 ile 1.0'dan büyük en küçük sayının farkı).
pub const DOUBLE_EPSILON: double = 2.2204460492503131E-16;
/// `double` tipinin en küçük subnormal (denormalized) pozitif değeri.
pub const DOUBLE_DENORM_MIN: double = 4.9406564584124654E-324;
/// `double` tipinin basamak (ondalık hane) cinsinden duyarlılığı.
pub const DOUBLE_DIGITS: int = 15;
/// `double` tipinin bit cinsinden boyutu.
pub const DOUBLE_BITS: int = 64;
/// `double` tipinin byte cinsinden boyutu.
pub const DOUBLE_BYTES: int = 8;
/// `double` için sonsuzluk değeri.
pub const DOUBLE_INFINITY: double = inf; // CNT'de 'inf' veya benzeri bir literal varsayılır
/// `double` için "sayı değil" (Not-a-Number) değeri.
pub const DOUBLE_NAN: double = nan; // CNT'de 'nan' veya benzeri bir literal varsayılır


// --- 3. Platform veya Mimariye Bağlı Diğer Sınırlar (Eğer CNT'nin tür sisteminde varsa) ---

// --- 3.1. `size_t` (Boyut Tipi) ---
// Not: `size_t` genellikle platformun adres genişliğine bağlıdır (32-bit veya 64-bit).
// CNT'de `size_t` benzeri bir tip varsa, onun için sınırlar buraya eklenebilir.
// Örneğin, `u64` olarak varsayalım.
 pub const SIZE_T_MAX: u64 = U64_MAX; // Eğer size_t 64 bit unsigned ise
 pub const SIZE_T_BITS: int = 64;

// --- 3.2. `ptrdiff_t` (İşaretçi Fark Tipi) ---
// Not: `ptrdiff_t` genellikle `int` veya `i64` gibi işaretli bir tiptir.
 pub const PTRDIFF_T_MIN: i64 = I64_MIN; // Eğer ptrdiff_t 64 bit signed ise
 pub const PTRDIFF_T_MAX: i64 = I64_MAX;

// --- 3.3. `char` (Karakter Tipi) ---
// Not: `char` tipi platforma bağlı olarak işaretli veya işaretsiz olabilir
// ve genellikle 8 bittir. CNT'de Unicode için `char` muhtemelen 32-bit (Unicode scalar value) olabilir.
// Burada basit bir 8-bit ASCII/Latin-1 `char` varsayalım.
/// `char` tipinin minimum değeri.
pub const CHAR_MIN: u8 = 0u8; // Eğer char işaretsiz ise (veya ASCII/UTF-8 byte)
/// `char` tipinin maksimum değeri.
pub const CHAR_MAX: u8 = 255u8; // Eğer char işaretsiz ise
/// `char` tipinin bit cinsinden boyutu.
pub const CHAR_BITS: int = 8; // Eğer 8-bit byte ise


// --- 4. Yardımcı Fonksiyonlar (Gelecekte Eklenebilecekler) ---
// Bu tür fonksiyonlar, doğrudan tipin min/max değerini döndürebilir,
// ancak genellikle sabitler daha pratiktir.
// Eğer CNT'de "generic" fonksiyonlar veya "trait"ler varsa,
// o zaman bu daha soyut bir şekilde de yapılabilir.

 pub fn min<T>() -> T; // Bir tip T için minimum değeri döndürür
 pub fn max<T>() -> T; // Bir tip T için maksimum değeri döndürür
