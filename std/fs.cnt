// fs.cnt
// Standart Dosya Sistemi (File System) modülü

import std::string; // toString() ve diğer string işlemleri için gerekebilir

// Harici C veya sistem dosya sistemi API'lerine bağlandığı varsayılan dahili fonksiyonlar.
// Bu fonksiyonlar, işletim sisteminin dosya sistemi çağrılarını (örn. open, read, write, stat) kullanır.
extern fn _cnt_fs_read_to_string(path: &string) -> _cnt_Result_string_fs_Error;
extern fn _cnt_fs_write_string(path: &string, content: &string) -> _cnt_Result_void_fs_Error;
extern fn _cnt_fs_create_file(path: &string) -> _cnt_Result_void_fs_Error;
extern fn _cnt_fs_remove_file(path: &string) -> _cnt_Result_void_fs_Error;
extern fn _cnt_fs_exists(path: &string) -> bool;
extern fn _cnt_fs_is_file(path: &string) -> bool;
extern fn _cnt_fs_is_dir(path: &string) -> bool;
extern fn _cnt_fs_create_dir(path: &string) -> _cnt_Result_void_fs_Error;
extern fn _cnt_fs_remove_dir(path: &string) -> _cnt_Result_void_fs_Error;


/// `Error` Enum'u: Dosya sistemi işlemleri sırasında oluşabilecek hataları temsil eder.
pub enum Error {
    /// Dosya veya dizin bulunamadı.
    NotFound;
    /// İzinler yetersiz.
    PermissionDenied;
    /// Geçersiz argüman (örn. geçersiz yol).
    InvalidInput(string);
    /// Dosya zaten mevcut.
    AlreadyExists;
    /// Bir I/O işlemi sırasında bilinmeyen bir hata oluştu.
    IoError(string);
    /// Bilinmeyen veya yakalanamayan bir hata.
    Other(string);
}

/// `Result<T, E>` Enum'u: Bir işlemin başarılı sonucunu (`Ok(T)`) veya bir hatayı (`Err(E)`) temsil eder.
/// Bu, Rust dilindeki `Result` enum'una benzer şekilde, hata yönetimini güvenli ve zorunlu kılar.
pub enum Result<T, E> {
    /// İşlem başarılı oldu ve `T` tipinde bir değer döndürdü.
    Ok(T);
    /// İşlem bir hata ile sonuçlandı ve `E` tipinde bir hata döndürdü.
    Err(E);
}

// _cnt_Result_string_fs_Error ve _cnt_Result_void_fs_Error gibi extern tipleri,
// CNT derleyicisinin dahili olarak Result enum'unu nasıl temsil ettiğini gösterir.
// CNT içinde bu tipler doğrudan Result<string, Error> ve Result<void, Error> olarak kullanılacaktır.


/// Bir dosyadan tüm içeriği string olarak okur.
///
/// # Parametreler
/// - `path`: Okunacak dosyanın yolu (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa dosya içeriğini içeren `Result::Ok(string)`,
/// hata oluşursa `Result::Err(Error)`.
pub fn read_to_string(path: &string) -> Result<string, Error> {
    _cnt_fs_read_to_string(path)
}

/// Bir string içeriğini belirtilen dosyaya yazar.
/// Eğer dosya mevcutsa içeriğini üzerine yazar. Dosya mevcut değilse oluşturur.
///
/// # Parametreler
/// - `path`: Yazılacak dosyanın yolu (string referansı).
/// - `content`: Dosyaya yazılacak içerik (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa `Result::Ok(void)`, hata oluşursa `Result::Err(Error)`.
pub fn write_string(path: &string, content: &string) -> Result<void, Error> {
    _cnt_fs_write_string(path, content)
}

/// Belirtilen yolda yeni bir boş dosya oluşturur.
/// Eğer dosya zaten mevcutsa `Error::AlreadyExists` hatası döndürür.
///
/// # Parametreler
/// - `path`: Oluşturulacak dosyanın yolu (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa `Result::Ok(void)`, hata oluşursa `Result::Err(Error)`.
pub fn create_file(path: &string) -> Result<void, Error> {
    _cnt_fs_create_file(path)
}

/// Belirtilen yoldaki dosyayı siler.
/// Eğer dosya bulunamazsa veya silme izni yoksa hata döndürür.
///
/// # Parametreler
/// - `path`: Silinecek dosyanın yolu (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa `Result::Ok(void)`, hata oluşursa `Result::Err(Error)`.
pub fn remove_file(path: &string) -> Result<void, Error> {
    _cnt_fs_remove_file(path)
}

/// Belirtilen yolun var olup olmadığını kontrol eder (dosya veya dizin).
///
/// # Parametreler
/// - `path`: Kontrol edilecek yol (string referansı).
///
/// # Dönüş Değeri
/// Yol varsa `true`, yoksa `false`.
pub fn exists(path: &string) -> bool {
    _cnt_fs_exists(path)
}

/// Belirtilen yolun bir dosya olup olmadığını kontrol eder.
/// Yol mevcut değilse `false` döndürür.
///
/// # Parametreler
/// - `path`: Kontrol edilecek yol (string referansı).
///
/// # Dönüş Değeri
/// Yol bir dosya ise `true`, değilse `false`.
pub fn is_file(path: &string) -> bool {
    _cnt_fs_is_file(path)
}

/// Belirtilen yolun bir dizin olup olmadığını kontrol eder.
/// Yol mevcut değilse `false` döndürür.
///
/// # Parametreler
/// - `path`: Kontrol edilecek yol (string referansı).
///
/// # Dönüş Değeri
/// Yol bir dizin ise `true`, değilse `false`.
pub fn is_dir(path: &string) -> bool {
    _cnt_fs_is_dir(path)
}

/// Belirtilen yolda yeni bir dizin oluşturur.
/// Eğer dizin zaten mevcutsa `Error::AlreadyExists` hatası döndürür.
///
/// # Parametreler
/// - `path`: Oluşturulacak dizinin yolu (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa `Result::Ok(void)`, hata oluşursa `Result::Err(Error)`.
pub fn create_dir(path: &string) -> Result<void, Error> {
    _cnt_fs_create_dir(path)
}

/// Belirtilen yoldaki boş bir dizini siler.
/// Eğer dizin boş değilse veya bulunamazsa/silme izni yoksa hata döndürür.
///
/// # Parametreler
/// - `path`: Silinecek dizinin yolu (string referansı).
///
/// # Dönüş Değeri
/// İşlem başarılı olursa `Result::Ok(void)`, hata oluşursa `Result::Err(Error)`.
pub fn remove_dir(path: &string) -> Result<void, Error> {
    _cnt_fs_remove_dir(path)
}

// --- İstenirse Eklenebilecek Diğer Fonksiyonlar ---
// - copy(from: &string, to: &string) -> Result<void, Error>; // Dosya kopyalama
// - rename(old_path: &string, new_path: &string) -> Result<void, Error>; // Yeniden adlandırma/Taşıma
// - read_dir(path: &string) -> Result<List<string>, Error>; // Bir dizindeki öğeleri listeleme
// - metadata(path: &string) -> Result<Metadata, Error>; // Dosya/dizin meta verilerini alma (boyut, değiştirme tarihi vb.)
// - current_dir() -> Result<string, Error>; // Mevcut çalışma dizinini alma
// - set_current_dir(path: &string) -> Result<void, Error>; // Mevcut çalışma dizinini ayarlama
